//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BSky.GlobalResources.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("BSky.GlobalResources.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AAA.
        /// </summary>
        public static string AAA {
            get {
                return ResourceManager.GetString("AAA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All floating licenses in use..
        /// </summary>
        public static string AllFloatingLicInUse {
            get {
                return ResourceManager.GetString("AllFloatingLicInUse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is True. This property controls whether the OK button on the dialog is enabled or disabled. If CanExecute =true for all controls on the dialog and contained sub-dialogs, the OK button is enabled, if CanExecute =false for any one control on the dialog or contained sub-dialogs, the OK button is disabled.   To define a rule, click in the property and then click the ellipses button..
        /// </summary>
        public static string BSkyBrowse_CanExecuteDescription {
            get {
                return ResourceManager.GetString("BSkyBrowse_CanExecuteDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default is True(enabled). This property controls whether the default state of this browse control is enabled or disabled. For enabled, select True, for disabled select False. When enabled, you can click this control to select a file, when disabled, you cannot click the control.For example, you may want the initial state of the control to be disabled, however you may want to enable it based on a selection made in another control.
        /// </summary>
        public static string BSkyBrowse_EnabledDescription {
            get {
                return ResourceManager.GetString("BSkyBrowse_EnabledDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is the height of this control. To change, drag the adorners(corner of the control) or enter a height..
        /// </summary>
        public static string BSkyBrowse_HeightDescription {
            get {
                return ResourceManager.GetString("BSkyBrowse_HeightDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is the X coordinate of the top left corner of this control. To change, drag the control to a different position or enter a X coordinate..
        /// </summary>
        public static string BSkyBrowse_LeftDescription {
            get {
                return ResourceManager.GetString("BSkyBrowse_LeftDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Required property. You must specify a unique name for every control added to the dialog. You will not be able to save a dialog definition unless every control on the dialog and containing sub-dialogs has a unique name..
        /// </summary>
        public static string BSkyBrowse_NameDescription {
            get {
                return ResourceManager.GetString("BSkyBrowse_NameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Optional property. Enter a caption for this browse control..
        /// </summary>
        public static string BSkyBrowse_TextDescription {
            get {
                return ResourceManager.GetString("BSkyBrowse_TextDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is the Y coordinate of the top left corner of this control. To change drag the control to a different position or enter a Y coordinate..
        /// </summary>
        public static string BSkyBrowse_TopDescription {
            get {
                return ResourceManager.GetString("BSkyBrowse_TopDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The browse control allows you select files from your desktop. This is a read only property. Click on each property in the grid to see the configuration options for this browse control..
        /// </summary>
        public static string BSkyBrowse_TypeDescription {
            get {
                return ResourceManager.GetString("BSkyBrowse_TypeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is the width of this control. To change drag the adorners(corner of the control) or enter a width..
        /// </summary>
        public static string BSkyBrowse_WidthDescription {
            get {
                return ResourceManager.GetString("BSkyBrowse_WidthDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is True. This property controls whether the OK button on the dialog is enabled or disabled. If CanExecute =true for all controls on the dialog and contained sub-dialogs, the OK button is enabled, if CanExecute =false for any one control on the dialog or contained sub-dialogs, the OK button is disabled..
        /// </summary>
        public static string BSkyButton_CanExecuteDescription {
            get {
                return ResourceManager.GetString("BSkyButton_CanExecuteDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This property allows you to create a sub dialog. Click the property and then click the ellipses button to create a sub-dialog..
        /// </summary>
        public static string BSkyButton_DesignerDescription {
            get {
                return ResourceManager.GetString("BSkyButton_DesignerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default is True(enabled). This property controls whether the default state of this button control is enabled or disabled. For enabled, select True, for disabled select False. When enabled, you can click on the button, when disabled, you cannot click on the button.For example, you may want the initial state of the button to be disabled, however you may want to enable it based on an entry made in a textbox control..
        /// </summary>
        public static string BSkyButton_EnabledDescription {
            get {
                return ResourceManager.GetString("BSkyButton_EnabledDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is the height of this control. To change, drag the adorners(corner of the control) or enter a height..
        /// </summary>
        public static string BSkyButton_HeightDescription {
            get {
                return ResourceManager.GetString("BSkyButton_HeightDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is the X coordinate of the top left corner of this control. To change, drag the control to a different position or enter a X coordinate..
        /// </summary>
        public static string BSkyButton_LeftDescription {
            get {
                return ResourceManager.GetString("BSkyButton_LeftDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Required property. You must specify a unique name for every control added to the dialog . You will not be able to save a dialog definition unless every control on the dialog and containing sub-dialogs has a unique name..
        /// </summary>
        public static string BSkyButton_NameDescription {
            get {
                return ResourceManager.GetString("BSkyButton_NameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Optional property. Enter a caption for the button..
        /// </summary>
        public static string BSkyButton_TextDescription {
            get {
                return ResourceManager.GetString("BSkyButton_TextDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is the Y coordinate of the top left corner of this control. To change drag the control to a different position or enter a Y coordinate..
        /// </summary>
        public static string BSkyButton_TopDescription {
            get {
                return ResourceManager.GetString("BSkyButton_TopDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Button control allows you to create a button which when clicked brings up a sub-dialog. The sub-dialog property allows you to define a sub-dialog. Click on each property in the grid to see the configuration options for the button control..
        /// </summary>
        public static string BSkyButton_TypeDescription {
            get {
                return ResourceManager.GetString("BSkyButton_TypeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is the width of this control. To change drag the adorners(corner of the control) or enter a width..
        /// </summary>
        public static string BSkyButton_WidthDescription {
            get {
                return ResourceManager.GetString("BSkyButton_WidthDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Determines whether split processing is enabled or disabled. For example for data manipulation commands, split processing should be turned off..
        /// </summary>
        public static string BSkyCanvas_splitProcessingDescription {
            get {
                return ResourceManager.GetString("BSkyCanvas_splitProcessingDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default is empty(no rule). Use this optional property to define rules that trigger property changes in other controls, based on the change in state of this checkbox control. For example, if a user checks the checkbox, enable a textbox control to capture additional parameters. To define a rule, click in the property and click the elipses button..
        /// </summary>
        public static string BSkyCheckBox_CheckedChangeBehaviourDescription {
            get {
                return ResourceManager.GetString("BSkyCheckBox_CheckedChangeBehaviourDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default is True(enabled). This property controls whether the default state of the control is enabled or disabled. For enabled, select True, for disabled select False. For example, you may want the initial state of the checkbox to be disabled, however you may want to enable it based on a selection made in another control.
        /// </summary>
        public static string BSkyCheckBox_EnabledDescription {
            get {
                return ResourceManager.GetString("BSkyCheckBox_EnabledDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is the height of this control. To change, drag the adorners(corner of the control) or enter a height..
        /// </summary>
        public static string BSkyCheckBox_HeightDescription {
            get {
                return ResourceManager.GetString("BSkyCheckBox_HeightDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is False(unchecked). This property sets the default state of the checkbox. For checked, select True, for unchecked, select False.
        /// </summary>
        public static string BSkyCheckBox_IsSelectedDescription {
            get {
                return ResourceManager.GetString("BSkyCheckBox_IsSelectedDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is the X coordinate of the top left corner of this control. To change, drag the control to a different position or enter a X coordinate..
        /// </summary>
        public static string BSkyCheckBox_LeftDescription {
            get {
                return ResourceManager.GetString("BSkyCheckBox_LeftDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Required property. You must specify a unique name for every control added to the canvas. You will not be able to save a dialog definition unless every control on the dialog has a unique name..
        /// </summary>
        public static string BSkyCheckBox_NameDescription {
            get {
                return ResourceManager.GetString("BSkyCheckBox_NameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Optional property. Enter descriptive text to be displayed with this checkbox..
        /// </summary>
        public static string BSkyCheckBox_TextDescription {
            get {
                return ResourceManager.GetString("BSkyCheckBox_TextDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is the Y coordinate of the top left corner of this control. To change drag the control to a different position or enter a Y coordinate..
        /// </summary>
        public static string BSkyCheckBox_TopDescription {
            get {
                return ResourceManager.GetString("BSkyCheckBox_TopDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Checkbox Control. This is a read only property. Click on each property in the grid to see the configuration options for the checkbox control..
        /// </summary>
        public static string BSkyCheckBox_TypeDescription {
            get {
                return ResourceManager.GetString("BSkyCheckBox_TypeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is the width of this control. To change drag the adorners(corner of the control) or enter a width..
        /// </summary>
        public static string BSkyCheckBox_WidthDescription {
            get {
                return ResourceManager.GetString("BSkyCheckBox_WidthDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is True. This property controls whether the OK button on the dialog is enabled or disabled. If CanExecute =true for all controls on the dialog and contained sub-dialogs, the OK button is enabled, if CanExecute =false for any one control on the dialog or contained sub-dialogs, the OK button is disabled. For example, to ensure that the dialog cannot be executed unless one or more items are selected in this combobox control, set the default value of canexecute for this control to false, then defi [rest of string was truncated]&quot;;.
        /// </summary>
        public static string BSkyComboBox_CanExecuteDescription {
            get {
                return ResourceManager.GetString("BSkyComboBox_CanExecuteDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Click the property name and then click the lookup button to enter entries that will display when you click the combobox control.
        /// </summary>
        public static string BSkyComboBox_ComboBoxEntriesDescription {
            get {
                return ResourceManager.GetString("BSkyComboBox_ComboBoxEntriesDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Optional property. This is the item that will be displayed by default in the combobox..
        /// </summary>
        public static string BSkyComboBox_DefaultSelectionDescription {
            get {
                return ResourceManager.GetString("BSkyComboBox_DefaultSelectionDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default is True(enabled). This property controls whether the default state of this combobox control is enabled or disabled. For enabled, select True, for disabled select False. When enabled, you can select items in this control, when disabled, you cannot interact with the control. For example, you may want the initial state of the combobox control to be disabled, however you may want to enable it based on a selection made in another control.
        /// </summary>
        public static string BSkyComboBox_EnabledDescription {
            get {
                return ResourceManager.GetString("BSkyComboBox_EnabledDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is the height of this control. To change, drag the adorners(corner of the control) or enter a height..
        /// </summary>
        public static string BSkyComboBox_HeightDescription {
            get {
                return ResourceManager.GetString("BSkyComboBox_HeightDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is the X coordinate of the top left corner of this control. To change, drag the control to a different position or enter a X coordinate..
        /// </summary>
        public static string BSkyComboBox_LeftDescription {
            get {
                return ResourceManager.GetString("BSkyComboBox_LeftDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Required property. You must specify a unique name for every control added to the dialog. You will not be able to save a dialog definition unless every control on the dialog and containing sub-dialogs has a unique name..
        /// </summary>
        public static string BSkyComboBox_NameDescription {
            get {
                return ResourceManager.GetString("BSkyComboBox_NameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This is a read only property. Its value gets set automatically to the number of items in the combobox that are selected. This property can be used for defining rules. For example, you want the OK button disabled unless there are one or more items selected in the combobox. If nothing is selected in the combobox you define a rule that checks the NoItemsSelected property, if it is 0, set canexecute to false..
        /// </summary>
        public static string BSkyComboBox_NoItemsSelectedDescription {
            get {
                return ResourceManager.GetString("BSkyComboBox_NoItemsSelectedDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default is empty(no rules). Use this optional property to define rules that trigger property changes in this or other controls, based on the changes in the items selected in this combobox control. For example, to ensure that the dialog cannot be executed unless one or more items are selected in this combobox control, set the default value of the canexecute property for this control to false, then define a rule that triggers when the NoItemsSelected property is greater than 0 (This happens when one or more i [rest of string was truncated]&quot;;.
        /// </summary>
        public static string BSkyComboBox_SelectionChangeBehaviourDescription {
            get {
                return ResourceManager.GetString("BSkyComboBox_SelectionChangeBehaviourDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value of %%VALUE%% indicates that all the selected items in the combobox control will be replaced by the control name in the syntax. These values will be used to parameterize the syntax string created when the dialog is executed. If you want a different value, for example &apos;test&apos; to replace the control name, replace %%VALUE%% with &apos;test&apos; (you don&apos;t need to enter the single quotes).
        /// </summary>
        public static string BSkyComboBox_SyntaxDescription {
            get {
                return ResourceManager.GetString("BSkyComboBox_SyntaxDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is the Y coordinate of the top left corner of this control. To change drag the control to a different position or enter a Y coordinate..
        /// </summary>
        public static string BSkyComboBox_TopDescription {
            get {
                return ResourceManager.GetString("BSkyComboBox_TopDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A ComboBox Control is a combination of a drop-down list or list box and a single-line editable textbox. A combobox control allows the user to either type a value directly into the control or pick a value from a listbox.This is a read only property. Click on each property in the grid to see the configuration options for the combobox control..
        /// </summary>
        public static string BSkyComboBox_TypeDescription {
            get {
                return ResourceManager.GetString("BSkyComboBox_TypeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is the width of this control. To change drag the adorners(corner of the control) or enter a width..
        /// </summary>
        public static string BSkyComboBox_WidthDescription {
            get {
                return ResourceManager.GetString("BSkyComboBox_WidthDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to BlueSky is downloading and installing required R packages..
        /// </summary>
        public static string BSkyDownloadingReqPkgs {
            get {
                return ResourceManager.GetString("BSkyDownloadingReqPkgs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is True. This property controls whether the OK button on the dialog is enabled or disabled. If CanExecute =true for all controls on the dialog and contained sub-dialogs, the OK button is enabled, if CanExecute =false for any one control on the dialog or contained sub-dialogs, the OK button is disabled. For example, to ensure that the dialog cannot be executed unless a selection is made in this combobox control, set the default value of canexecute for this control to false, then define a rule t [rest of string was truncated]&quot;;.
        /// </summary>
        public static string BSkyEditableComboBox_CanExecuteDescription {
            get {
                return ResourceManager.GetString("BSkyEditableComboBox_CanExecuteDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Click the property name and then click the lookup button to enter entries that will display when you click the combobox control.
        /// </summary>
        public static string BSkyEditableComboBox_ComboBoxEntriesDescription {
            get {
                return ResourceManager.GetString("BSkyEditableComboBox_ComboBoxEntriesDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Optional property. This is the item that will be displayed by default in the combobox..
        /// </summary>
        public static string BSkyEditableComboBox_DefaultSelectionDescription {
            get {
                return ResourceManager.GetString("BSkyEditableComboBox_DefaultSelectionDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default is True(enabled). This property controls whether the default state of this combobox control is enabled or disabled. For enabled, select True, for disabled select False. When enabled, you can select items in this control, when disabled, you cannot interact with the control. For example, you may want the initial state of the combobox control to be disabled, however you may want to enable it based on a selection made in another control.
        /// </summary>
        public static string BSkyEditableComboBox_EnabledDescription {
            get {
                return ResourceManager.GetString("BSkyEditableComboBox_EnabledDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is the height of this control. To change, drag the adorners(corner of the control) or enter a height..
        /// </summary>
        public static string BSkyEditableComboBox_HeightDescription {
            get {
                return ResourceManager.GetString("BSkyEditableComboBox_HeightDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is the X coordinate of the top left corner of this control. To change, drag the control to a different position or enter a X coordinate..
        /// </summary>
        public static string BSkyEditableComboBox_LeftDescription {
            get {
                return ResourceManager.GetString("BSkyEditableComboBox_LeftDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Required property. You must specify a unique name for every control added to the dialog. You will not be able to save a dialog definition unless every control on the dialog and containing sub-dialogs has a unique name..
        /// </summary>
        public static string BSkyEditableComboBox_NameDescription {
            get {
                return ResourceManager.GetString("BSkyEditableComboBox_NameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is the empty string. This is the value that substitutes the control name in the syntax when no items are selected in the combobox..
        /// </summary>
        public static string BSkyEditableComboBox_NothingSelectedDescription {
            get {
                return ResourceManager.GetString("BSkyEditableComboBox_NothingSelectedDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is the empty string. If an item is selected in the combobox, the item is prefixed with this string..
        /// </summary>
        public static string BSkyEditableComboBox_prefixSelectedValueDescription {
            get {
                return ResourceManager.GetString("BSkyEditableComboBox_prefixSelectedValueDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default is empty(no rules). Use this optional property to define rules that trigger property changes in this or other controls, based on a change in the item selected in this combobox control. For example, to ensure that the dialog cannot be executed unless one item is selected in this combobox control, set the default value of the canexecute property for this control to false, then define a rule that triggers when an item is selected that sets the canexecute property to &apos;true&apos; which enables the OK button o [rest of string was truncated]&quot;;.
        /// </summary>
        public static string BSkyEditableComboBox_SelectionChangeBehaviourDescription {
            get {
                return ResourceManager.GetString("BSkyEditableComboBox_SelectionChangeBehaviourDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value of %%VALUE%% indicates that the selected item in the combobox control will be replaced by the control name in the syntax. These values will be used to parameterize the syntax string created when the dialog is executed. If you want a different value, for example &apos;test&apos; to replace the control name, replace %%VALUE%% with &apos;test&apos; (you don&apos;t need to enter the single quotes).
        /// </summary>
        public static string BSkyEditableComboBox_SyntaxDescription {
            get {
                return ResourceManager.GetString("BSkyEditableComboBox_SyntaxDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is the Y coordinate of the top left corner of this control. To change drag the control to a different position or enter a Y coordinate..
        /// </summary>
        public static string BSkyEditableComboBox_TopDescription {
            get {
                return ResourceManager.GetString("BSkyEditableComboBox_TopDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An Editable ComboBox Control is a combination of a drop-down list or list box and a single-line editable textbox. A combobox control allows the user to either type a value directly into the control or pick a value from a listbox.This is a read only property. Click on each property in the grid to see the configuration options for the combobox control..
        /// </summary>
        public static string BSkyEditableComboBox_TypeDescription {
            get {
                return ResourceManager.GetString("BSkyEditableComboBox_TypeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is the width of this control. To change drag the adorners(corner of the control) or enter a width..
        /// </summary>
        public static string BSkyEditableComboBox_WidthDescription {
            get {
                return ResourceManager.GetString("BSkyEditableComboBox_WidthDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to array, matrix dataframe and BSky return structure..
        /// </summary>
        public static string BSkyFormatSupportedTypes {
            get {
                return ResourceManager.GetString("BSkyFormatSupportedTypes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Optional property. Enter a caption for this groupbox.
        /// </summary>
        public static string BSkyGroupBox_HeaderTextDescription {
            get {
                return ResourceManager.GetString("BSkyGroupBox_HeaderTextDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is the height of this control. To change, drag the adorners(corner of the control) or enter a height..
        /// </summary>
        public static string BSkyGroupBox_HeightDescription {
            get {
                return ResourceManager.GetString("BSkyGroupBox_HeightDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is the X coordinate of the top left corner of this control. To change, drag the control to a different position or enter a X coordinate..
        /// </summary>
        public static string BSkyGroupBox_LeftDescription {
            get {
                return ResourceManager.GetString("BSkyGroupBox_LeftDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Required property. You must specify a unique name for every control added to the dialog. You will not be able to save a dialog definition unless every control on the dialog and containing sub-dialogs has a unique name..
        /// </summary>
        public static string BSkyGroupBox_NameDescription {
            get {
                return ResourceManager.GetString("BSkyGroupBox_NameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is the Y coordinate of the top left corner of this control. To change drag the control to a different position or enter a Y coordinate..
        /// </summary>
        public static string BSkyGroupBox_TopDescription {
            get {
                return ResourceManager.GetString("BSkyGroupBox_TopDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to GroupBox Control allows you to group related controls. This is a read only property. Click on each property in the grid to see the configuration options for the groupbox control..
        /// </summary>
        public static string BSkyGroupBox_TypeDescription {
            get {
                return ResourceManager.GetString("BSkyGroupBox_TypeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is the width of this control. To change drag the adorners(corner of the control) or enter a width..
        /// </summary>
        public static string BSkyGroupBox_WidthDescription {
            get {
                return ResourceManager.GetString("BSkyGroupBox_WidthDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Key &apos;bskygrphcntrlimage&apos; not found in config file. Aborting....
        /// </summary>
        public static string bskygrphctrlimgConfigKeyNotFound {
            get {
                return ResourceManager.GetString("bskygrphctrlimgConfigKeyNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is the height of this control. To change, drag the adorners(corner of the control) or enter a height..
        /// </summary>
        public static string BSkyLabel_HeightDescription {
            get {
                return ResourceManager.GetString("BSkyLabel_HeightDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is the X coordinate of the top left corner of this control. To change, drag the control to a different position or enter a X coordinate..
        /// </summary>
        public static string BSkyLabel_LeftDescription {
            get {
                return ResourceManager.GetString("BSkyLabel_LeftDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Required property. You must specify a unique name for every control added to the dialog. You will not be able to save a dialog definition unless every control on the dialog and containing sub-dialogs has a unique name..
        /// </summary>
        public static string BSkyLabel_NameDescription {
            get {
                return ResourceManager.GetString("BSkyLabel_NameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Optional property. Enter a caption (descriptive text) that will be displayed..
        /// </summary>
        public static string BSkyLabel_TextDescription {
            get {
                return ResourceManager.GetString("BSkyLabel_TextDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is the Y coordinate of the top left corner of this control. To change drag the control to a different position or enter a Y coordinate..
        /// </summary>
        public static string BSkyLabel_TopDescription {
            get {
                return ResourceManager.GetString("BSkyLabel_TopDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Allows you to add descriptive text associated with another control, for example you can use the label control to display a caption above your source variable list titled &apos;Source Variable List&apos; ..
        /// </summary>
        public static string BSkyLabel_TypeDescription {
            get {
                return ResourceManager.GetString("BSkyLabel_TypeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is the width of this control. To change drag the adorners(corner of the control) or enter a width..
        /// </summary>
        public static string BSkyLabel_WidthDescription {
            get {
                return ResourceManager.GetString("BSkyLabel_WidthDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Click this property and then click the lookup button to create a mapping between items in the master listbox and the items that will be displayed in the slave listbox..
        /// </summary>
        public static string BSkyListBox_MappingMasterSlaveEntriesDescription {
            get {
                return ResourceManager.GetString("BSkyListBox_MappingMasterSlaveEntriesDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This is the name of the slave listbox which will get populated with predefined items based on the items selected in the master listbox. Any listbox control can be a slave listbox..
        /// </summary>
        public static string BSkyListBox_SlaveListBoxNameDescription {
            get {
                return ResourceManager.GetString("BSkyListBox_SlaveListBoxNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Control Settings.
        /// </summary>
        public static string BSkyListBox_TypeCategory {
            get {
                return ResourceManager.GetString("BSkyListBox_TypeCategory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ListBox Control allows you to display a listbox with pre-configured items. This is a read only property. Click on each property in the grid to see the configuration options for this listbox control..
        /// </summary>
        public static string BSkyListBox_TypeDescription {
            get {
                return ResourceManager.GetString("BSkyListBox_TypeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Master listbox allows you to setup a listbox with items which when selected populate another listbox with predefined values. This is a read only property. Click on each property in the grid to see the configuration options for this listbox control..
        /// </summary>
        public static string BSkyMasterListBox_TypeDescription {
            get {
                return ResourceManager.GetString("BSkyMasterListBox_TypeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to BlueSky application needs following R package(s):.
        /// </summary>
        public static string BSkyNeedsRPkgs {
            get {
                return ResourceManager.GetString("BSkyNeedsRPkgs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is True. This property controls whether the OK button on the dialog is enabled or disabled. If CanExecute =true for all controls on the dialog and contained sub-dialogs, the OK button is enabled, if CanExecute =false for any one control on the dialog or contained sub-dialogs, the OK button is disabled. For example, to ensure that the dialog cannot be executed unless a selection is made in this combobox control, set the default value of canexecute for this control to false, then define a rule t [rest of string was truncated]&quot;;.
        /// </summary>
        public static string BSkyNonEditableComboBox_CanExecuteDescription {
            get {
                return ResourceManager.GetString("BSkyNonEditableComboBox_CanExecuteDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Click the property name and then click the lookup button to enter entries that will display when you click the combobox control.
        /// </summary>
        public static string BSkyNonEditableComboBox_ComboBoxEntriesDescription {
            get {
                return ResourceManager.GetString("BSkyNonEditableComboBox_ComboBoxEntriesDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default is True(enabled). This property controls whether the default state of this combobox control is enabled or disabled. For enabled, select True, for disabled select False. When enabled, you can select items in this control, when disabled, you cannot interact with the control. For example, you may want the initial state of the combobox control to be disabled, however you may want to enable it based on a selection made in another control.
        /// </summary>
        public static string BSkyNonEditableComboBox_EnabledDescription {
            get {
                return ResourceManager.GetString("BSkyNonEditableComboBox_EnabledDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is the height of this control. To change, drag the adorners(corner of the control) or enter a height..
        /// </summary>
        public static string BSkyNonEditableComboBox_HeightDescription {
            get {
                return ResourceManager.GetString("BSkyNonEditableComboBox_HeightDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is the X coordinate of the top left corner of this control. To change, drag the control to a different position or enter a X coordinate..
        /// </summary>
        public static string BSkyNonEditableComboBox_LeftDescription {
            get {
                return ResourceManager.GetString("BSkyNonEditableComboBox_LeftDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Required property. You must specify a unique name for every control added to the dialog. You will not be able to save a dialog definition unless every control on the dialog and containing sub-dialogs has a unique name..
        /// </summary>
        public static string BSkyNonEditableComboBox_NameDescription {
            get {
                return ResourceManager.GetString("BSkyNonEditableComboBox_NameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is the empty string. This is the value that substitutes the control name in the syntax when no items are selected in the combobox..
        /// </summary>
        public static string BSkyNonEditableComboBox_NothingSelectedDescription {
            get {
                return ResourceManager.GetString("BSkyNonEditableComboBox_NothingSelectedDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default is empty(no rules). Use this optional property to define rules that trigger property changes in this or other controls, based on a change in the item selected in this combobox control. For example, to ensure that the dialog cannot be executed unless one item is selected in this combobox control, set the default value of the canexecute property for this control to false, then define a rule that triggers when an item is selected that sets the canexecute property to &apos;true&apos; which enables the OK button o [rest of string was truncated]&quot;;.
        /// </summary>
        public static string BSkyNonEditableComboBox_SelectionChangeBehaviourDescription {
            get {
                return ResourceManager.GetString("BSkyNonEditableComboBox_SelectionChangeBehaviourDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value of %%VALUE%% indicates that the selected item in the combobox control will be replaced by the control name in the syntax. These values will be used to parameterize the syntax string created when the dialog is executed. If you want a different value, for example &apos;test&apos; to replace the control name, replace %%VALUE%% with &apos;test&apos; (you don&apos;t need to enter the single quotes).
        /// </summary>
        public static string BSkyNonEditableComboBox_SyntaxDescription {
            get {
                return ResourceManager.GetString("BSkyNonEditableComboBox_SyntaxDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is the Y coordinate of the top left corner of this control. To change drag the control to a different position or enter a Y coordinate..
        /// </summary>
        public static string BSkyNonEditableComboBox_TopDescription {
            get {
                return ResourceManager.GetString("BSkyNonEditableComboBox_TopDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Non Editable ComboBox Control allows you to select a single item from predefined items. This is a read only property. Click on each property in the grid to see the configuration options for the combobox control..
        /// </summary>
        public static string BSkyNonEditableComboBox_TypeDescription {
            get {
                return ResourceManager.GetString("BSkyNonEditableComboBox_TypeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is the width of this control. To change drag the adorners(corner of the control) or enter a width..
        /// </summary>
        public static string BSkyNonEditableComboBox_WidthDescription {
            get {
                return ResourceManager.GetString("BSkyNonEditableComboBox_WidthDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to BlueSky application may not work properly if the required R packages are missing..
        /// </summary>
        public static string BSkyNotWorkReqPkgMissing {
            get {
                return ResourceManager.GetString("BSkyNotWorkReqPkgMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Corrupt file or not a BlueSky Output format!.
        /// </summary>
        public static string BSkyOutFileBadFormat {
            get {
                return ResourceManager.GetString("BSkyOutFileBadFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to BSky Ouput File not Found!.
        /// </summary>
        public static string BSkyOutFileNotFound {
            get {
                return ResourceManager.GetString("BSkyOutFileNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to BlueSky package missing.
        /// </summary>
        public static string BSkyPkgMissing {
            get {
                return ResourceManager.GetString("BSkyPkgMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is True. This property controls whether the OK button on the dialog is enabled or disabled. If CanExecute =true for all controls on the dialog and contained sub-dialogs, the OK button is enabled, if CanExecute =false for any one control on the dialog or contained sub-dialogs, the OK button is disabled.  To define a rule, click in the property and then click the ellipses button..
        /// </summary>
        public static string BSkyRadioButton_CanExecuteDescription {
            get {
                return ResourceManager.GetString("BSkyRadioButton_CanExecuteDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default is empty(no rules). Use this optional property to define rules that trigger property changes in this or other controls, based on the changes in state of this radiobutton control. For example, lets assume that a certain textbox control needs to be enabled when this radiobutton is selected, you will set the default state of this radio button as unselected and then define a rule that gets triggered when the radiobutton is selected (the radiobuttons isselected property is set to true) and sets the Enabl [rest of string was truncated]&quot;;.
        /// </summary>
        public static string BSkyRadioButton_CheckedChangeBehaviourDescription {
            get {
                return ResourceManager.GetString("BSkyRadioButton_CheckedChangeBehaviourDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default is True(enabled). This property controls whether the default state of this radiobutton control is enabled or disabled. For enabled, select True, for disabled select False. When enabled, you can select this radiobutton, when disabled, you cannot select the radiobutton..
        /// </summary>
        public static string BSkyRadioButton_EnabledDescription {
            get {
                return ResourceManager.GetString("BSkyRadioButton_EnabledDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This is a required property. This is the name of the radio group control that contains the radiobutton. All radiobuttons in the same radio group control must have the same name. For example radiobuttons A, B and C belong to the same radio group control, if B is selected, and you then click on A, A gets selected and B deselected..
        /// </summary>
        public static string BSkyRadioButton_GroupNameDescription {
            get {
                return ResourceManager.GetString("BSkyRadioButton_GroupNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is the height of this control. To change, drag the adorners(corner of the control) or enter a height..
        /// </summary>
        public static string BSkyRadioButton_HeightDescription {
            get {
                return ResourceManager.GetString("BSkyRadioButton_HeightDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is False(unchecked). This property determines whether the radiobutton is checked or unchecked.  For checked, select True, for unchecked, select False.
        /// </summary>
        public static string BSkyRadioButton_IsSelectedDescription {
            get {
                return ResourceManager.GetString("BSkyRadioButton_IsSelectedDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is the X coordinate of the top left corner of this control. To change, drag the control to a different position or enter a X coordinate..
        /// </summary>
        public static string BSkyRadioButton_LeftDescription {
            get {
                return ResourceManager.GetString("BSkyRadioButton_LeftDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Required property. You must specify a unique name for every control added to the dialog. You will not be able to save a dialog definition unless every control on the dialog and containing sub-dialogs has a unique name..
        /// </summary>
        public static string BSkyRadioButton_NameDescription {
            get {
                return ResourceManager.GetString("BSkyRadioButton_NameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value of %%VALUE%% indicates that the name of the radiogroup control that this radiobutton belongs to will be replaced by TRUE in the syntax when this radiobutton is selected. If you want a different value to replace the name of the radiogroup control i.e. instead of TRUE replace 1, then replace %%VALUE%% by 1. You can also type in %DATASET% to replace the name of the current dataset when the radiobutton is selected. The syntax property allows you to parameterize the syntax string created when the d [rest of string was truncated]&quot;;.
        /// </summary>
        public static string BSkyRadioButton_SyntaxDescription {
            get {
                return ResourceManager.GetString("BSkyRadioButton_SyntaxDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Optional property. Enter a caption for this radiobutton..
        /// </summary>
        public static string BSkyRadioButton_TextDescription {
            get {
                return ResourceManager.GetString("BSkyRadioButton_TextDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is the Y coordinate of the top left corner of this control. To change drag the control to a different position or enter a Y coordinate..
        /// </summary>
        public static string BSkyRadioButton_TopDescription {
            get {
                return ResourceManager.GetString("BSkyRadioButton_TopDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to RadioButton Control. This is a read only property. Click on each property in the grid to see the configuration options for the radiobutton control..
        /// </summary>
        public static string BSkyRadioButton_TypeDescription {
            get {
                return ResourceManager.GetString("BSkyRadioButton_TypeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is the width of this control. To change drag the adorners(corner of the control) or enter a width..
        /// </summary>
        public static string BSkyRadioButton_WidthDescription {
            get {
                return ResourceManager.GetString("BSkyRadioButton_WidthDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Optional property. Enter a caption for this RadioGroup control..
        /// </summary>
        public static string BSkyRadioGroup_HeaderTextDescription {
            get {
                return ResourceManager.GetString("BSkyRadioGroup_HeaderTextDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is the height of this control. To change, drag the adorners(corner of the control) or enter a height..
        /// </summary>
        public static string BSkyRadioGroup_HeightDescription {
            get {
                return ResourceManager.GetString("BSkyRadioGroup_HeightDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is the X coordinate of the top left corner of this control. To change, drag the control to a different position or enter a X coordinate..
        /// </summary>
        public static string BSkyRadioGroup_LeftDescription {
            get {
                return ResourceManager.GetString("BSkyRadioGroup_LeftDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Required property. You must specify a unique name for every control added to the dialog. You will not be able to save a dialog definition unless every control on the dialog and containing sub-dialogs has a unique name..
        /// </summary>
        public static string BSkyRadioGroup_NameDescription {
            get {
                return ResourceManager.GetString("BSkyRadioGroup_NameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add one or more radiobuttons to the radio group control by clicking in the property and clicking the ellipses button.  When adding radiobuttons, you need to enter a name, a descriptive text and select the default state (selected or unselected) for each radiobutton. Hit the Enter key to add the next radiobutton..
        /// </summary>
        public static string BSkyRadioGroup_RadioButtonsDescription {
            get {
                return ResourceManager.GetString("BSkyRadioGroup_RadioButtonsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is the Y coordinate of the top left corner of this control. To change drag the control to a different position or enter a Y coordinate..
        /// </summary>
        public static string BSkyRadioGroup_TopDescription {
            get {
                return ResourceManager.GetString("BSkyRadioGroup_TopDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RadioGroup control allows you to setup a group of radiobuttons. This is a read only property. Click on each property in the grid to see the configuration options for the radiogroup control..
        /// </summary>
        public static string BSkyRadioGroup_TypeDescription {
            get {
                return ResourceManager.GetString("BSkyRadioGroup_TypeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is the width of this control. To change drag the adorners(corner of the control) or enter a width..
        /// </summary>
        public static string BSkyRadioGroup_WidthDescription {
            get {
                return ResourceManager.GetString("BSkyRadioGroup_WidthDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is True. This property controls whether the OK button on the dialog is enabled or disabled. If CanExecute =true for all controls on the dialog and contained sub-dialogs, the OK button is enabled, if CanExecute =false for any one control on the dialog or contained sub-dialogs, the OK button is disabled..
        /// </summary>
        public static string BSkySourceList_CanExecuteDescription {
            get {
                return ResourceManager.GetString("BSkySourceList_CanExecuteDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default is empty(no rule). Use this optional property to define rules that trigger property changes in this or other controls, based on the change in state of this variable list control..
        /// </summary>
        public static string BSkySourceList_SelectionChangeBehaviourDescription {
            get {
                return ResourceManager.GetString("BSkySourceList_SelectionChangeBehaviourDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value of %%VALUE%% indicates that all the variables in the variable list will be replaced by the control name in the syntax. These values will be used to parameterize the syntax string created when the dialog is executed. If you want a different value, for example &apos;test&apos; to replace the control name, replace %%VALUE%% with &apos;test&apos; (you don&apos;t need to enter the single quotes). You typically will not use a source variable list in your syntax..
        /// </summary>
        public static string BSkySourceList_SyntaxDescription {
            get {
                return ResourceManager.GetString("BSkySourceList_SyntaxDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The source variable list control displays all the variables from the active dataset. Apply filters if you want to filter out variables from this control. This is a read only property. Click on each property in the grid to see the configuration options for the source variable list control..
        /// </summary>
        public static string BSkySourceList_TypeDescription {
            get {
                return ResourceManager.GetString("BSkySourceList_TypeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is True. This property controls whether the OK button on the dialog is enabled or disabled. If CanExecute =true for all controls on the dialog and contained sub-dialogs, the OK button is enabled, if CanExecute =false for any one control on the dialog or contained sub-dialogs, the OK button is disabled. For example, to ensure that the dialog cannot be executed unless one or more items are dragged and dropped into this variable list control, set the default value of canexecute for this control t [rest of string was truncated]&quot;;.
        /// </summary>
        public static string BSkyTargetList_CanExecuteDescription {
            get {
                return ResourceManager.GetString("BSkyTargetList_CanExecuteDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default is empty(no rules). Use this optional property to define rules that trigger property changes in this or other controls, based on the changes in state of this variable list control. For example, to ensure that the dialog cannot be executed unless one or more items are dragged and dropped into this variable list control, set the default value of the canexecute property for this control to false, then define a rule that triggers when the itemscount property is greater than 0 (This happens when one or m [rest of string was truncated]&quot;;.
        /// </summary>
        public static string BSkyTargetList_SelectionChangeBehaviourDescription {
            get {
                return ResourceManager.GetString("BSkyTargetList_SelectionChangeBehaviourDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value of %%VALUE%% indicates that all the variables in the variable list control will be replaced by the control name in the syntax. These values will be used to parameterize the syntax string created when the dialog is executed. If you want a different value, for example &apos;test&apos; to replace the control name, replace %%VALUE%% with &apos;test&apos; (you don&apos;t need to enter the single quotes).
        /// </summary>
        public static string BSkyTargetList_SyntaxDescription {
            get {
                return ResourceManager.GetString("BSkyTargetList_SyntaxDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The destination variable list contains the variables you want to analyze. Variables are copied/moved from the source variable list to the destination variable list. This is a read only property. Click on each property in the grid to see the configuration options for the destination variable list control..
        /// </summary>
        public static string BSkyTargetList_TypeDescription {
            get {
                return ResourceManager.GetString("BSkyTargetList_TypeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value of %%VALUE%% indicates that all the variables in the listbox will be replaced by the control name in the syntax. These values will be used to parameterize the syntax string created when the dialog is executed. If you want a different value, for example &apos;test&apos; to replace the control name, replace %%VALUE%% with &apos;test&apos; (you don&apos;t need to enter the single quotes).
        /// </summary>
        public static string BSkyVariableList_SyntaxDescription {
            get {
                return ResourceManager.GetString("BSkyVariableList_SyntaxDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to cannot be assigned to the property.
        /// </summary>
        public static string CantAssignToProp {
            get {
                return ResourceManager.GetString("CantAssignToProp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This Object cannot be formatted using BSKyFormat. BSkyFormat can be used on Array, Matrix, Data Frame and BSky List objects only.
        /// </summary>
        public static string CantBSkyFormatErrorMsg {
            get {
                return ResourceManager.GetString("CantBSkyFormatErrorMsg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not create template from.
        /// </summary>
        public static string CantCreateTemplate {
            get {
                return ResourceManager.GetString("CantCreateTemplate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Couldn&apos;t Execute the command.
        /// </summary>
        public static string CantExecuteCommand {
            get {
                return ResourceManager.GetString("CantExecuteCommand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to cannot be found..
        /// </summary>
        public static string CantFind {
            get {
                return ResourceManager.GetString("CantFind", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Couldn&apos;t install Dialog.
        /// </summary>
        public static string CantInstallDialog {
            get {
                return ResourceManager.GetString("CantInstallDialog", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dialog cannot be installed as output file is not mentioned.
        /// </summary>
        public static string CantInstallDialogNoOutFile {
            get {
                return ResourceManager.GetString("CantInstallDialogNoOutFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Title cannot be empty, Exiting Dialog install.
        /// </summary>
        public static string CantInstallDialogNoTitle {
            get {
                return ResourceManager.GetString("CantInstallDialogNoTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error: Cannot Launch BlueSky Statistics!.
        /// </summary>
        public static string CantLaunchBSkyApp {
            get {
                return ResourceManager.GetString("CantLaunchBSkyApp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to open.
        /// </summary>
        public static string cantopen {
            get {
                return ResourceManager.GetString("cantopen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot open the file.
        /// </summary>
        public static string CantOpenFile {
            get {
                return ResourceManager.GetString("CantOpenFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t Open Command Editor. UAMenuCommand properties not set..
        /// </summary>
        public static string CantOpenREditor {
            get {
                return ResourceManager.GetString("CantOpenREditor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File cannot be saved to &apos;.XLS&apos; format. Click OK to choose a different format like XLSX, RData etc..
        /// </summary>
        public static string CantSaveAsExcel {
            get {
                return ResourceManager.GetString("CantSaveAsExcel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to cannot be set to value.
        /// </summary>
        public static string CantSetValue {
            get {
                return ResourceManager.GetString("CantSetValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The propertyname for a behavior on the control.
        /// </summary>
        public static string CanvasPropNotSet1 {
            get {
                return ResourceManager.GetString("CanvasPropNotSet1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to is not set. Please open the dialog in dialog editor and click define rules on the control.
        /// </summary>
        public static string CanvasPropNotSet2 {
            get {
                return ResourceManager.GetString("CanvasPropNotSet2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to and check the value for propertyname..
        /// </summary>
        public static string CanvasPropNotSet3 {
            get {
                return ResourceManager.GetString("CanvasPropNotSet3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please check the behaviours of the control.
        /// </summary>
        public static string CheckBehaviour {
            get {
                return ResourceManager.GetString("CheckBehaviour", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do you want to close.
        /// </summary>
        public static string CloseConfirmation {
            get {
                return ResourceManager.GetString("CloseConfirmation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Close Dataset.
        /// </summary>
        public static string CloseDataset {
            get {
                return ResourceManager.GetString("CloseDataset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do you want to close Dataset?.
        /// </summary>
        public static string CloseDatasetConfirmation {
            get {
                return ResourceManager.GetString("CloseDatasetConfirmation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do you want to continue to install dialog?.
        /// </summary>
        public static string ConfirmDialogInstall {
            get {
                return ResourceManager.GetString("ConfirmDialogInstall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do you want to overwrite the command.
        /// </summary>
        public static string ConfirmDialogOverwrite {
            get {
                return ResourceManager.GetString("ConfirmDialogOverwrite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to reach License Server.(Go to [ Help -&gt; Licensing ] and connect to the current floating license server)..
        /// </summary>
        public static string ConnectCurrFloatingServer {
            get {
                return ResourceManager.GetString("ConnectCurrFloatingServer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please contact your administrator..
        /// </summary>
        public static string ContactAdmin {
            get {
                return ResourceManager.GetString("ContactAdmin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The control name you have entered .
        /// </summary>
        public static string ControlNameEntered {
            get {
                return ResourceManager.GetString("ControlNameEntered", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to is not a valid property for the control.
        /// </summary>
        public static string ControlPropertyNotValid {
            get {
                return ResourceManager.GetString("ControlPropertyNotValid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Critical Error Occurred!.
        /// </summary>
        public static string CriticalError {
            get {
                return ResourceManager.GetString("CriticalError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Open source user can only install maximum of 5 custom dialogs. Extra dialogs will appear disabled (greyed out) in the menu..
        /// </summary>
        public static string CstmDlgLmtRchd {
            get {
                return ResourceManager.GetString("CstmDlgLmtRchd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A behaviour of the control.
        /// </summary>
        public static string CtrlBehaviourIncorrect1 {
            get {
                return ResourceManager.GetString("CtrlBehaviourIncorrect1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to is configured incorrectly..
        /// </summary>
        public static string CtrlBehaviourIncorrect2 {
            get {
                return ResourceManager.GetString("CtrlBehaviourIncorrect2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is a type mismatch between the property name.
        /// </summary>
        public static string CtrlBehaviourIncorrect3 {
            get {
                return ResourceManager.GetString("CtrlBehaviourIncorrect3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to and the value.
        /// </summary>
        public static string CtrlBehaviourIncorrect4 {
            get {
                return ResourceManager.GetString("CtrlBehaviourIncorrect4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please open the dialog in the dialog editor program and correct.
        /// </summary>
        public static string CtrlBehaviourIncorrect5 {
            get {
                return ResourceManager.GetString("CtrlBehaviourIncorrect5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is True. This property controls whether the OK button on the dialog is enabled or disabled. If CanExecute =true for all controls on the dialog and contained sub-dialogs, the OK button is enabled, if CanExecute =false for any one control on the dialog or contained sub-dialogs, the OK button is disabled..
        /// </summary>
        public static string CtrlListBox_CanExecuteDescription {
            get {
                return ResourceManager.GetString("CtrlListBox_CanExecuteDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default is True(enabled). This property controls whether the default state of this variable list control is enabled or disabled. For enabled, select True, for disabled select False. When enabled, you can select items in this control, when disabled, you cannot interact with the control. For example, you may want the initial state of the variable list control to be disabled, however you may want to enable it based on a selection made in another control.
        /// </summary>
        public static string CtrlListBox_EnabledDescription {
            get {
                return ResourceManager.GetString("CtrlListBox_EnabledDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is the height of this control. To change, drag the adorners(corner of the control) or enter a height..
        /// </summary>
        public static string CtrlListBox_HeightDescription {
            get {
                return ResourceManager.GetString("CtrlListBox_HeightDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is the X coordinate of the top left corner of this control. To change, drag the control to a different position or enter a X coordinate..
        /// </summary>
        public static string CtrlListBox_LeftDescription {
            get {
                return ResourceManager.GetString("CtrlListBox_LeftDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This property allows you to enter the items that will be displayed in this listbox. Click in the property and then click the button to enter values..
        /// </summary>
        public static string CtrlListBox_ListBoxEntriesDescription {
            get {
                return ResourceManager.GetString("CtrlListBox_ListBoxEntriesDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default is false(you can only select a single item). This property controls whether you can select a single item or multiple items in this control. You can select a single item if MultiSelect =false, multiple items if MultiSelect =true..
        /// </summary>
        public static string CtrlListBox_MultiSelectDescription {
            get {
                return ResourceManager.GetString("CtrlListBox_MultiSelectDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Required property. You must specify a unique name for every control added to the dialog. You will not be able to save a dialog definition unless every control on the dialog and containing sub-dialogs has a unique name..
        /// </summary>
        public static string CtrlListBox_NameDescription {
            get {
                return ResourceManager.GetString("CtrlListBox_NameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This property keep tracks off the number of items that are selected. You can use this property to define rules. This is a readonly property..
        /// </summary>
        public static string CtrlListBox_SelectedItemsCountDescription {
            get {
                return ResourceManager.GetString("CtrlListBox_SelectedItemsCountDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default is empty(no rules). Use this optional property to define rules that trigger property changes in this or other controls, based on the changes in state of this listbox control. To define a rule, click in the property and then click the ellipses button..
        /// </summary>
        public static string CtrlListBox_SelectionChangeBehaviourDescription {
            get {
                return ResourceManager.GetString("CtrlListBox_SelectionChangeBehaviourDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is UseComma. This setting allows you to set how the variables contained in this variable list control will replace the control name in the syntax string. To see additional details, click in the property and click the ellipses button..
        /// </summary>
        public static string CtrlListBox_SubstituteSettingsDescription {
            get {
                return ResourceManager.GetString("CtrlListBox_SubstituteSettingsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value of %%VALUE%% indicates that all the items in the listbox will be replaced by the control name in the syntax. These values will be used to parameterize the syntax string created when the dialog is executed. If you want a different value, for example &apos;test&apos; to replace the control name, replace %%VALUE%% with &apos;test&apos; (you don&apos;t need to enter the single quotes).
        /// </summary>
        public static string CtrlListBox_SyntaxDescription {
            get {
                return ResourceManager.GetString("CtrlListBox_SyntaxDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is the Y coordinate of the top left corner of this control. To change drag the control to a different position or enter a Y coordinate..
        /// </summary>
        public static string CtrlListBox_TopDescription {
            get {
                return ResourceManager.GetString("CtrlListBox_TopDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default value is the width of this control. To change drag the adorners(corner of the control) or enter a width..
        /// </summary>
        public static string CtrlListBox_WidthDescription {
            get {
                return ResourceManager.GetString("CtrlListBox_WidthDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name is used in CommandString in Dialog XAML..
        /// </summary>
        public static string CtrlNameUsedInSyntax {
            get {
                return ResourceManager.GetString("CtrlNameUsedInSyntax", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dialog XAML does not define control named:.
        /// </summary>
        public static string CtrlNotInXaml {
            get {
                return ResourceManager.GetString("CtrlNotInXaml", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dataset?.
        /// </summary>
        public static string dataset {
            get {
                return ResourceManager.GetString("dataset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to has been set to NULL. It&apos;s likely that you ran some analysis or data manipulation command that made the dataset NULL.
        /// </summary>
        public static string DatasetBecameNull {
            get {
                return ResourceManager.GetString("DatasetBecameNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to NULL Dataset..
        /// </summary>
        public static string DatasetNull {
            get {
                return ResourceManager.GetString("DatasetNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error: Dataset object does not exist..
        /// </summary>
        public static string DatasetObjNotExists {
            get {
                return ResourceManager.GetString("DatasetObjNotExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -Dataframe does not exist (or is NULL or has no rows/columns).
        /// </summary>
        public static string DFNotExists {
            get {
                return ResourceManager.GetString("DFNotExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dialog installed..
        /// </summary>
        public static string DialogInstalled {
            get {
                return ResourceManager.GetString("DialogInstalled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dialog Title Empty..
        /// </summary>
        public static string DialogTitleEmpty {
            get {
                return ResourceManager.GetString("DialogTitleEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Possible reason: Your antivirus software is preventing the installation of the &apos;BlueSky&apos; R package. Please exit the BlueSky Statistics application, disable the antivirus and relaunch the BlueSky Statistics application. This has to done only once..
        /// </summary>
        public static string DisableAntivirus {
            get {
                return ResourceManager.GetString("DisableAntivirus", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to needs the following R package(s):.
        /// </summary>
        public static string DlgNeedTheseRPkgs {
            get {
                return ResourceManager.GetString("DlgNeedTheseRPkgs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to does not exist..
        /// </summary>
        public static string DoesNotExist {
            get {
                return ResourceManager.GetString("DoesNotExist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to dataset.
        /// </summary>
        public static string Dtaset {
            get {
                return ResourceManager.GetString("Dtaset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You have entered an empty value for control name, please review the control names of your controls in the grid and enter a valid value.
        /// </summary>
        public static string EnteredEmptyControlName {
            get {
                return ResourceManager.GetString("EnteredEmptyControlName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You have entered an empty property name, please review the property names in the grid and enter a valid value.
        /// </summary>
        public static string EnteredEmptyPropertyName {
            get {
                return ResourceManager.GetString("EnteredEmptyPropertyName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You have entered an invalid control name or the control is not valid for defining behaviours (you cannot set behaviours on labels and button control types), please review the control names of your controls in the grid and enter a valid value.
        /// </summary>
        public static string EnteredInvalidControlName {
            get {
                return ResourceManager.GetString("EnteredInvalidControlName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You have entered an invalid property name, please review the property names in the grid and enter a valid value.
        /// </summary>
        public static string EnteredInvalidProperty {
            get {
                return ResourceManager.GetString("EnteredInvalidProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enter package name that you want to load..
        /// </summary>
        public static string EnterPkgNameToLoad {
            get {
                return ResourceManager.GetString("EnterPkgNameToLoad", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You need to enter a valid value for the Master Name property in the property grid.
        /// </summary>
        public static string EnterValidMasterNameProp {
            get {
                return ResourceManager.GetString("EnterValidMasterNameProp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You need to enter a valid name for the slave listbox in the property grid.
        /// </summary>
        public static string EnterValidNameSlave {
            get {
                return ResourceManager.GetString("EnterValidNameSlave", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You need to enter a valid value for the Slave Name property in the property grid.
        /// </summary>
        public static string EnterValidSlaveNameProp {
            get {
                return ResourceManager.GetString("EnterValidSlaveNameProp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You need to enter a valid value for the Name property in the property grid.
        /// </summary>
        public static string EnterValidValue {
            get {
                return ResourceManager.GetString("EnterValidValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error: Cannot Load/Refresh Dataset.
        /// </summary>
        public static string ErrCantLodRefDataset {
            get {
                return ResourceManager.GetString("ErrCantLodRefDataset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error in block declaration. Mismatch { or }.
        /// </summary>
        public static string ErrCurlyMismatch {
            get {
                return ResourceManager.GetString("ErrCurlyMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error executing the command..
        /// </summary>
        public static string ErrExecutingCommand {
            get {
                return ResourceManager.GetString("ErrExecutingCommand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error Getting Installed Packages.
        /// </summary>
        public static string ErrGettingInstalledPkgs {
            get {
                return ResourceManager.GetString("ErrGettingInstalledPkgs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error while getting installed packages..
        /// </summary>
        public static string ErrGettingInstalledPkgs2 {
            get {
                return ResourceManager.GetString("ErrGettingInstalledPkgs2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error Getting Loaded Packages.
        /// </summary>
        public static string ErrGettingLoadedPkgs {
            get {
                return ResourceManager.GetString("ErrGettingLoadedPkgs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error while getting loaded packages..
        /// </summary>
        public static string ErrGettingLoadedPkgs2 {
            get {
                return ResourceManager.GetString("ErrGettingLoadedPkgs2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to R Command Error.
        /// </summary>
        public static string ErrInRCommand {
            get {
                return ResourceManager.GetString("ErrInRCommand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error Installing CRAN Package.
        /// </summary>
        public static string ErrInstallingFromCRAN {
            get {
                return ResourceManager.GetString("ErrInstallingFromCRAN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error Installing Package.
        /// </summary>
        public static string ErrInstallingRPkg {
            get {
                return ResourceManager.GetString("ErrInstallingRPkg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error while installing package..
        /// </summary>
        public static string ErrInstallingRPkg2 {
            get {
                return ResourceManager.GetString("ErrInstallingRPkg2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error while installing required packages from CRAN..
        /// </summary>
        public static string ErrInstallReqPkgFrmCRAN {
            get {
                return ResourceManager.GetString("ErrInstallReqPkgFrmCRAN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error Loading new dataset. Make sure you have BlueSky R package installed.
        /// </summary>
        public static string ErrLoadingNewDS {
            get {
                return ResourceManager.GetString("ErrLoadingNewDS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error loading following R package(s):.
        /// </summary>
        public static string ErrLoadingRPkg {
            get {
                return ResourceManager.GetString("ErrLoadingRPkg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error while loading package..
        /// </summary>
        public static string ErrLoadingRPkg2 {
            get {
                return ResourceManager.GetString("ErrLoadingRPkg2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error Loading Package(s).
        /// </summary>
        public static string ErrLoadingRPkgs {
            get {
                return ResourceManager.GetString("ErrLoadingRPkgs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error Loading User Session Package..
        /// </summary>
        public static string ErrLoadingUsrSessionPkg {
            get {
                return ResourceManager.GetString("ErrLoadingUsrSessionPkg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error while loading user session package(s)..
        /// </summary>
        public static string ErrLoadingUsrSessionPkgs {
            get {
                return ResourceManager.GetString("ErrLoadingUsrSessionPkgs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error while modifying menu..
        /// </summary>
        public static string ErrModifyingMenu {
            get {
                return ResourceManager.GetString("ErrModifyingMenu", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You do not have a valid license to run this application. For help, go to Help -&gt; Licensing..
        /// </summary>
        public static string ErrNoValidNodeLic {
            get {
                return ResourceManager.GetString("ErrNoValidNodeLic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error Opening Dataset.
        /// </summary>
        public static string ErrOpeningDataset {
            get {
                return ResourceManager.GetString("ErrOpeningDataset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error Opening Dataset.(probably not a data frame).
        /// </summary>
        public static string ErrOpeningDataset2 {
            get {
                return ResourceManager.GetString("ErrOpeningDataset2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to open the file.
        /// </summary>
        public static string ErrOpeningFile {
            get {
                return ResourceManager.GetString("ErrOpeningFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error opening registered graphic command list..
        /// </summary>
        public static string ErrOpeningRegGrpLst {
            get {
                return ResourceManager.GetString("ErrOpeningRegGrpLst", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error executing:.
        /// </summary>
        public static string ErrorExecuting {
            get {
                return ResourceManager.GetString("ErrorExecuting", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to R Syntax Execution Error!.
        /// </summary>
        public static string ErrorExecutingTitle {
            get {
                return ResourceManager.GetString("ErrorExecutingTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error Occurred!.
        /// </summary>
        public static string ErrorOccurred {
            get {
                return ResourceManager.GetString("ErrorOccurred", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error in block declaration. Mismatch ( or ).
        /// </summary>
        public static string ErrParenthesisMismatch {
            get {
                return ResourceManager.GetString("ErrParenthesisMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error: Required Model type not selected.
        /// </summary>
        public static string ErrReqModelNotSelected {
            get {
                return ResourceManager.GetString("ErrReqModelNotSelected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error: Required R Package(s) Missing.
        /// </summary>
        public static string ErrReqRPkgMissing {
            get {
                return ResourceManager.GetString("ErrReqRPkgMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error Uninstalling Package.
        /// </summary>
        public static string ErrUninstallingPkg {
            get {
                return ResourceManager.GetString("ErrUninstallingPkg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error while uninstalling package..
        /// </summary>
        public static string ErrUninstallingPkg2 {
            get {
                return ResourceManager.GetString("ErrUninstallingPkg2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error Unloading Package.
        /// </summary>
        public static string ErrUnloadingPkg {
            get {
                return ResourceManager.GetString("ErrUnloadingPkg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error while unloading package..
        /// </summary>
        public static string ErrUnloadingPkg2 {
            get {
                return ResourceManager.GetString("ErrUnloadingPkg2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File not found.
        /// </summary>
        public static string FileNotFound {
            get {
                return ResourceManager.GetString("FileNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All floating licenses in use. (Please contact your administrator).
        /// </summary>
        public static string FloatingAllinUseMsg {
            get {
                return ResourceManager.GetString("FloatingAllinUseMsg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Go to [ Help -&gt; Licensing ] to check the license status or to change the Floating License Server&apos;s IP address and port..
        /// </summary>
        public static string FloatingFixIPPortMsg {
            get {
                return ResourceManager.GetString("FloatingFixIPPortMsg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Floating License Error.
        /// </summary>
        public static string FloatingLicError {
            get {
                return ResourceManager.GetString("FloatingLicError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to reach license server.
        /// </summary>
        public static string FloatingLicServerUnreachable {
            get {
                return ResourceManager.GetString("FloatingLicServerUnreachable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Floating License Valid.
        /// </summary>
        public static string FloatingLicValid {
            get {
                return ResourceManager.GetString("FloatingLicValid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PLEASE SAVE YOUR WORK BEFORE APP BECOMES UNUSABLE..
        /// </summary>
        public static string FloatingLicWarningSaveWork {
            get {
                return ResourceManager.GetString("FloatingLicWarningSaveWork", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Go to [ Help -&gt; Licensing ]  if server IP address and port are not set (or incorrectly set).
        /// </summary>
        public static string FloatingPortIncorrectlySet {
            get {
                return ResourceManager.GetString("FloatingPortIncorrectlySet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Warning: Floating License Server Unreachable..
        /// </summary>
        public static string FloatingServerUnreachable {
            get {
                return ResourceManager.GetString("FloatingServerUnreachable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Floating License Server Unreachable..
        /// </summary>
        public static string FloatingServerUnreachable2 {
            get {
                return ResourceManager.GetString("FloatingServerUnreachable2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -Format not supported..
        /// </summary>
        public static string FormatNotSupported {
            get {
                return ResourceManager.GetString("FormatNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 2. File format not supported (or corrupt file or duplicate column names)..
        /// </summary>
        public static string FormatNotSupported2 {
            get {
                return ResourceManager.GetString("FormatNotSupported2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The help file must be a valid file name or Url.
        /// </summary>
        public static string HelpMustBeValidFileURL {
            get {
                return ResourceManager.GetString("HelpMustBeValidFileURL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The model type and model is not specified OR you have selected invalid model type and model.
        /// </summary>
        public static string IncorrectModelOrModelType {
            get {
                return ResourceManager.GetString("IncorrectModelOrModelType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to in control.
        /// </summary>
        public static string InCtrl {
            get {
                return ResourceManager.GetString("InCtrl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to in the dialog editor program.
        /// </summary>
        public static string InDialogEditor {
            get {
                return ResourceManager.GetString("InDialogEditor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please install the above mentioned R package(s)..
        /// </summary>
        public static string InstallAbvMentionedRPkgs {
            get {
                return ResourceManager.GetString("InstallAbvMentionedRPkgs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installation failed.
        /// </summary>
        public static string InstallFailed {
            get {
                return ResourceManager.GetString("InstallFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installing package(s) from CRAN.
        /// </summary>
        public static string InstallingFromCRAN {
            get {
                return ResourceManager.GetString("InstallingFromCRAN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installing required R packages from local drive.
        /// </summary>
        public static string InstallingRPkgFromLocal {
            get {
                return ResourceManager.GetString("InstallingRPkgFromLocal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Install New Dialog?.
        /// </summary>
        public static string InstallNewDialog {
            get {
                return ResourceManager.GetString("InstallNewDialog", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Install Package.
        /// </summary>
        public static string InstallPkg {
            get {
                return ResourceManager.GetString("InstallPkg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Install Package From CRAN.
        /// </summary>
        public static string InstallPkgsFromCRAN {
            get {
                return ResourceManager.GetString("InstallPkgsFromCRAN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Install required R packages from CRAN..
        /// </summary>
        public static string InstallReqRPkgFrmCRAN {
            get {
                return ResourceManager.GetString("InstallReqRPkgFrmCRAN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installing required R packages from CRAN.
        /// </summary>
        public static string InstallReqRPkgFrmCRAN2 {
            get {
                return ResourceManager.GetString("InstallReqRPkgFrmCRAN2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Install missing R package(s) and execute the dialog again..
        /// </summary>
        public static string InstallRPkgRunDialogAgain {
            get {
                return ResourceManager.GetString("InstallRPkgRunDialogAgain", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Go to: Tools -&gt; Package -&gt; Install/Update package(s) from CRAN..
        /// </summary>
        public static string InstallUpdatePkgMenuPath {
            get {
                return ResourceManager.GetString("InstallUpdatePkgMenuPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Internal Error: Operation Failed.
        /// </summary>
        public static string InternalError {
            get {
                return ResourceManager.GetString("InternalError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid Directory path!.
        /// </summary>
        public static string invalidDir {
            get {
                return ResourceManager.GetString("invalidDir", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid Filename!.
        /// </summary>
        public static string invalidFilename {
            get {
                return ResourceManager.GetString("invalidFilename", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid Path..
        /// </summary>
        public static string InvalidPath {
            get {
                return ResourceManager.GetString("InvalidPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Path not valid.
        /// </summary>
        public static string InvalidPath2 {
            get {
                return ResourceManager.GetString("InvalidPath2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to is null..
        /// </summary>
        public static string isNull {
            get {
                return ResourceManager.GetString("isNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Load Package.
        /// </summary>
        public static string LoadLibrary {
            get {
                return ResourceManager.GetString("LoadLibrary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Load Package(s).
        /// </summary>
        public static string LoadPackages {
            get {
                return ResourceManager.GetString("LoadPackages", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to - Binary compatibility between BlueSky Statistics and R. 64bit BlueSky Statistics requires 64bit R and 32bit BlueSky Statistics requires 32bit R. (To find about BlueSky version : Go to &apos;Help &gt; About&apos; in BlueSky Statistics. To find about R version: Launch R GUI (Start &gt; run &gt; RGUI.exe) and execute R.version command on the console)..
        /// </summary>
        public static string MakeSure32x64Compatibility {
            get {
                return ResourceManager.GetString("MakeSure32x64Compatibility", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to - Another session of the BlueSky Statistics application is not already running. Check your Windows task bar(if application is minimized) or use Windows Task Manager to see if BlueSky Statistics is already running..
        /// </summary>
        public static string MakeSureAnotherBSkySession {
            get {
                return ResourceManager.GetString("MakeSureAnotherBSkySession", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to - rhome configuration variable is pointing to the correct version of R..
        /// </summary>
        public static string MakeSureRHOME2LatestR {
            get {
                return ResourceManager.GetString("MakeSureRHOME2LatestR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to - R is installed. BlueSky Statistics requires R. To download R visit: (http://cran.r-project.org).
        /// </summary>
        public static string MakeSureRInstalled {
            get {
                return ResourceManager.GetString("MakeSureRInstalled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It may take 15 to 30 minutes to finish depending on your internet connection..
        /// </summary>
        public static string MayTake1530Min {
            get {
                return ResourceManager.GetString("MayTake1530Min", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error: Missing R Package(s).
        /// </summary>
        public static string MisingRPkgs {
            get {
                return ResourceManager.GetString("MisingRPkgs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to missing.
        /// </summary>
        public static string missing {
            get {
                return ResourceManager.GetString("missing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The following model types are supported:.
        /// </summary>
        public static string ModelsSupportedAre {
            get {
                return ResourceManager.GetString("ModelsSupportedAre", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid Operation.
        /// </summary>
        public static string MsgboxTitleForReloadFromDisk {
            get {
                return ResourceManager.GetString("MsgboxTitleForReloadFromDisk", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The configuration setting for overriding the default R installation is incorrect. We will choose the R version by inspecting the registry..
        /// </summary>
        public static string MsgChosingRFromRegistry {
            get {
                return ResourceManager.GetString("MsgChosingRFromRegistry", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This is a memory dataset you can not reload it using.
        /// </summary>
        public static string MsgForReloadFromDiskForMemoryDF {
            get {
                return ResourceManager.GetString("MsgForReloadFromDiskForMemoryDF", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Data -&gt; Reload Dataset from File.
        /// </summary>
        public static string MsgForReloadFromDiskForMemoryDF2 {
            get {
                return ResourceManager.GetString("MsgForReloadFromDiskForMemoryDF2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You can set the correct path in configuration settings, once application is launched.
        /// </summary>
        public static string MsgSetRHome {
            get {
                return ResourceManager.GetString("MsgSetRHome", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mulitple packages must be comma separated and no quotes should be used..
        /// </summary>
        public static string MultiRPkgInstallMsg {
            get {
                return ResourceManager.GetString("MultiRPkgInstallMsg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name should not be empty.
        /// </summary>
        public static string NameCantBeEmpty {
            get {
                return ResourceManager.GetString("NameCantBeEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to New Output Window.
        /// </summary>
        public static string NewOutputWin {
            get {
                return ResourceManager.GetString("NewOutputWin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No command to execute.
        /// </summary>
        public static string NoCommToExecute {
            get {
                return ResourceManager.GetString("NoCommToExecute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 3. Dataframe does not have row(s) or column(s)..
        /// </summary>
        public static string NoRowsColsPresent {
            get {
                return ResourceManager.GetString("NoRowsColsPresent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No R package files found.
        /// </summary>
        public static string NoRPkgFound {
            get {
                return ResourceManager.GetString("NoRPkgFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No tables to show in output!.
        /// </summary>
        public static string NoTablesReturned {
            get {
                return ResourceManager.GetString("NoTablesReturned", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -OR not &apos;data.frame&apos; type.
        /// </summary>
        public static string NotDataframe {
            get {
                return ResourceManager.GetString("NotDataframe", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 1. Not a data frame object..
        /// </summary>
        public static string NotDataframe2 {
            get {
                return ResourceManager.GetString("NotDataframe2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error: Dataset is not a data.frame type..
        /// </summary>
        public static string NotdataframeType {
            get {
                return ResourceManager.GetString("NotdataframeType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to is not a valid property of the control.
        /// </summary>
        public static string NotValidCtrlProp {
            get {
                return ResourceManager.GetString("NotValidCtrlProp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No Valid License.
        /// </summary>
        public static string NoValidLic {
            get {
                return ResourceManager.GetString("NoValidLic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Object cannot be formatted using BSKyFormat. Object:.
        /// </summary>
        public static string ObjCantBSkyFormat {
            get {
                return ResourceManager.GetString("ObjCantBSkyFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Object cannot be formatted using BSkyFormat. Type not supported. Supported types are :.
        /// </summary>
        public static string ObjCantBSkyFormat2 {
            get {
                return ResourceManager.GetString("ObjCantBSkyFormat2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -R.Net server from old session still running. Use task manager to close it..
        /// </summary>
        public static string OldSessionRunning {
            get {
                return ResourceManager.GetString("OldSessionRunning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 4. R.Net server from the old session still running (use task manager to kill it)..
        /// </summary>
        public static string OldSessionRunning2 {
            get {
                return ResourceManager.GetString("OldSessionRunning2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Open Dataset.
        /// </summary>
        public static string OpenDataset {
            get {
                return ResourceManager.GetString("OpenDataset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Open Output.
        /// </summary>
        public static string OpenOutput {
            get {
                return ResourceManager.GetString("OpenOutput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Loading RDATA file may overwrite your current variables/objects in memory if variables/objects with the same name are already present in the RDATA file..
        /// </summary>
        public static string OpenRDataWarnMsgLine1 {
            get {
                return ResourceManager.GetString("OpenRDataWarnMsgLine1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to BlueSky Statistics will open a R data file that contains an object of class data.frame in the grid, to proceed click OK..
        /// </summary>
        public static string OpenRDataWarnMsgLine1a {
            get {
                return ResourceManager.GetString("OpenRDataWarnMsgLine1a", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For EXPERIENCED R PROGRAMMERS ONLY who have used the R syntax editor to create R objects, opening R data files that contain objects with the same name can overwrite the existing objects you created..
        /// </summary>
        public static string OpenRDataWarnMsgLine1b {
            get {
                return ResourceManager.GetString("OpenRDataWarnMsgLine1b", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You can cancel and save all the current R objects which you can load later if required..
        /// </summary>
        public static string OpenRDataWarnMsgLine2 {
            get {
                return ResourceManager.GetString("OpenRDataWarnMsgLine2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To save and subsequently load the R objects run commands below from BlueSky R command editor..
        /// </summary>
        public static string OpenRDataWarnMsgLine3 {
            get {
                return ResourceManager.GetString("OpenRDataWarnMsgLine3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To save:  save.image(file=&apos;filename.rdata&apos;) # filename.rdata is the file name where objects will be saved..
        /// </summary>
        public static string OpenRDataWarnMsgLine4 {
            get {
                return ResourceManager.GetString("OpenRDataWarnMsgLine4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To load:  load(file=&apos;filename.rdata&apos;) # filename.rdata is the file name from which objects will be loaded..
        /// </summary>
        public static string OpenRDataWarnMsgLine5 {
            get {
                return ResourceManager.GetString("OpenRDataWarnMsgLine5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;filename.rdata&apos; is filename with forward slashed path e.g. &apos;C:/myfolder/myobjects.rdata&apos;.
        /// </summary>
        public static string OpenRDataWarnMsgLine6 {
            get {
                return ResourceManager.GetString("OpenRDataWarnMsgLine6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To proceed and open RData file click OK..
        /// </summary>
        public static string OpenRDataWarnMsgLine7 {
            get {
                return ResourceManager.GetString("OpenRDataWarnMsgLine7", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To open a R script, you need to switch to the &apos;Output and Syntax&apos; window..
        /// </summary>
        public static string OpenRScriptInSynWin {
            get {
                return ResourceManager.GetString("OpenRScriptInSynWin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Go to the right hand pane of the &apos;Output and Syntax&apos; window and click File -&gt; Open in the &apos;R Command Editor&apos;..
        /// </summary>
        public static string OpenRScriptMenuPath {
            get {
                return ResourceManager.GetString("OpenRScriptMenuPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Output.
        /// </summary>
        public static string OutputMenu {
            get {
                return ResourceManager.GetString("OutputMenu", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to is already open in the datagrid. Close the dataset first and then try Save-As again..
        /// </summary>
        public static string OverwritingOpenDatasetNotallowed {
            get {
                return ResourceManager.GetString("OverwritingOpenDatasetNotallowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Note: package must be already installed using &apos;install package&apos; option..
        /// </summary>
        public static string PkgMustAlreadyInstalled {
            get {
                return ResourceManager.GetString("PkgMustAlreadyInstalled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please make sure:.
        /// </summary>
        public static string PleaseMakeSure {
            get {
                return ResourceManager.GetString("PleaseMakeSure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please Confirm....
        /// </summary>
        public static string PlzConfirm {
            get {
                return ResourceManager.GetString("PlzConfirm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You have already created a control with the name  \&quot;{0}\&quot;, please enter a unique name.
        /// </summary>
        public static string PlzEnterUniqueName {
            get {
                return ResourceManager.GetString("PlzEnterUniqueName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PLEASE SAVE YOUR WORK BEFORE APP BECOMES UNUSABLE..
        /// </summary>
        public static string PlzSavB4AppUnusable {
            get {
                return ResourceManager.GetString("PlzSavB4AppUnusable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please wait....
        /// </summary>
        public static string PlzWait {
            get {
                return ResourceManager.GetString("PlzWait", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please wait while Dataset is Loading....
        /// </summary>
        public static string PlzWaitDatasetLoading {
            get {
                return ResourceManager.GetString("PlzWaitDatasetLoading", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to as the property type cannot accept that value..
        /// </summary>
        public static string PropCantAcceptVal {
            get {
                return ResourceManager.GetString("PropCantAcceptVal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The property name you have entered.
        /// </summary>
        public static string PropertyNameEntered {
            get {
                return ResourceManager.GetString("PropertyNameEntered", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reasons could be one or more of the following:.
        /// </summary>
        public static string reasonsAre {
            get {
                return ResourceManager.GetString("reasonsAre", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installation &gt; Install All required package(s) from CRAN..
        /// </summary>
        public static string RegPkgsMenuPath {
            get {
                return ResourceManager.GetString("RegPkgsMenuPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove Split First.
        /// </summary>
        public static string RemoveSplit {
            get {
                return ResourceManager.GetString("RemoveSplit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function manipulates the dataset. Please remove the split and rerun the command..
        /// </summary>
        public static string RemoveSplitForDataManipulation {
            get {
                return ResourceManager.GetString("RemoveSplitForDataManipulation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -OR required R package(s) are missing.
        /// </summary>
        public static string ReqRPkgMissing {
            get {
                return ResourceManager.GetString("ReqRPkgMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -Required R package is not installed..
        /// </summary>
        public static string ReqRPkgNotInstalled {
            get {
                return ResourceManager.GetString("ReqRPkgNotInstalled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Restart BlueSky Application.
        /// </summary>
        public static string RestartBSkyApp {
            get {
                return ResourceManager.GetString("RestartBSkyApp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You have to restart the Application for the changes to take effect..
        /// </summary>
        public static string RestartToApplyChanges {
            get {
                return ResourceManager.GetString("RestartToApplyChanges", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Changes will take effect after restarting the application!.
        /// </summary>
        public static string RestartToApplyChanges2 {
            get {
                return ResourceManager.GetString("RestartToApplyChanges2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Package(s) Installation Status:.
        /// </summary>
        public static string RPkgInstallStatus {
            get {
                return ResourceManager.GetString("RPkgInstallStatus", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Package names are case sensitive. Please check your R package name..
        /// </summary>
        public static string RPkgNameCaseSensitive {
            get {
                return ResourceManager.GetString("RPkgNameCaseSensitive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -Some issue on R side (like: required R package not loaded)..
        /// </summary>
        public static string RSideIssue {
            get {
                return ResourceManager.GetString("RSideIssue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 5. Some issue on R side (like: required library not loaded, incorrect syntax)..
        /// </summary>
        public static string RSideIssue2 {
            get {
                return ResourceManager.GetString("RSideIssue2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The path you have selected does not contain any R zip package files. Try again..
        /// </summary>
        public static string RZipPkgNotInPath {
            get {
                return ResourceManager.GetString("RZipPkgNotInPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Save-As failed..
        /// </summary>
        public static string SaveAsFailed {
            get {
                return ResourceManager.GetString("SaveAsFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Saved successfully:.
        /// </summary>
        public static string SaveAsSucces {
            get {
                return ResourceManager.GetString("SaveAsSucces", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Save Changes?.
        /// </summary>
        public static string SaveChanges {
            get {
                return ResourceManager.GetString("SaveChanges", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do you want to save changes?.
        /// </summary>
        public static string SaveConfirmation {
            get {
                return ResourceManager.GetString("SaveConfirmation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File Saved.
        /// </summary>
        public static string Saved {
            get {
                return ResourceManager.GetString("Saved", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Save Dataset.
        /// </summary>
        public static string SaveDataset {
            get {
                return ResourceManager.GetString("SaveDataset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Save &amp; Exit Command Editor?.
        /// </summary>
        public static string SaveExitCommandEditor {
            get {
                return ResourceManager.GetString("SaveExitCommandEditor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Save Output.
        /// </summary>
        public static string SaveOutput {
            get {
                return ResourceManager.GetString("SaveOutput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do you want to save commands before loading new script?.
        /// </summary>
        public static string SaveScriptPromptBeforeOpen {
            get {
                return ResourceManager.GetString("SaveScriptPromptBeforeOpen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Save to other formats.
        /// </summary>
        public static string SaveToOtherFormat {
            get {
                return ResourceManager.GetString("SaveToOtherFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select &apos;Model Type&apos; and &apos;Model&apos; from the dropdowns on the right of the toolbar of the BlueSky Statistics main window.
        /// </summary>
        public static string SelectModelTypeAndModel {
            get {
                return ResourceManager.GetString("SelectModelTypeAndModel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show Installed Packages.
        /// </summary>
        public static string ShowInstalledRPkgs {
            get {
                return ResourceManager.GetString("ShowInstalledRPkgs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show Loaded Packages.
        /// </summary>
        public static string ShowLoadedPkgs {
            get {
                return ResourceManager.GetString("ShowLoadedPkgs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Key &apos;sinkimage&apos; not found in config file. Aborting....
        /// </summary>
        public static string sinkimageConfigKeyNotFound {
            get {
                return ResourceManager.GetString("sinkimageConfigKeyNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Key &apos;sinkregstrdgrph&apos; not found in config file. You cannot run Graphics from Command Editor..
        /// </summary>
        public static string sinkregstrdgrphConfigKeyNotFound {
            get {
                return ResourceManager.GetString("sinkregstrdgrphConfigKeyNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please wait... Loading required R packages..
        /// </summary>
        public static string StatMsgPkgLoad {
            get {
                return ResourceManager.GetString("StatMsgPkgLoad", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sub dialog has not been created.
        /// </summary>
        public static string SubDialogNotCreated {
            get {
                return ResourceManager.GetString("SubDialogNotCreated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Key &apos;tempsink&apos; not found in config file. Aborting....
        /// </summary>
        public static string tempsinkConfigKeyNotFound {
            get {
                return ResourceManager.GetString("tempsinkConfigKeyNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The.
        /// </summary>
        public static string The {
            get {
                return ResourceManager.GetString("The", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The control name.
        /// </summary>
        public static string TheCtrlName {
            get {
                return ResourceManager.GetString("TheCtrlName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The following exception was generated.
        /// </summary>
        public static string TheExceptionGenerated {
            get {
                return ResourceManager.GetString("TheExceptionGenerated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The property name.
        /// </summary>
        public static string ThePropName {
            get {
                return ResourceManager.GetString("ThePropName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value.
        /// </summary>
        public static string TheValue {
            get {
                return ResourceManager.GetString("TheValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Undefined Control!.
        /// </summary>
        public static string UndefCtrl {
            get {
                return ResourceManager.GetString("UndefCtrl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to unexpected.
        /// </summary>
        public static string unexpected {
            get {
                return ResourceManager.GetString("unexpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Uninstall Package.
        /// </summary>
        public static string UninstallPkg {
            get {
                return ResourceManager.GetString("UninstallPkg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unload Package.
        /// </summary>
        public static string UnloadPkg {
            get {
                return ResourceManager.GetString("UnloadPkg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to  does not match the property name.
        /// </summary>
        public static string UnmatchingPropertyName {
            get {
                return ResourceManager.GetString("UnmatchingPropertyName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to User Package(s).
        /// </summary>
        public static string UserPkgs {
            get {
                return ResourceManager.GetString("UserPkgs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to - User&apos;s Session List is Empty.
        /// </summary>
        public static string UserSessListEmpty {
            get {
                return ResourceManager.GetString("UserSessListEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One or more User Session Package(s) failed to load..
        /// </summary>
        public static string UsrSessPkgsLoadFailed {
            get {
                return ResourceManager.GetString("UsrSessPkgsLoadFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Warning.
        /// </summary>
        public static string warning {
            get {
                return ResourceManager.GetString("warning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Warning! Overwrite?.
        /// </summary>
        public static string WarnOverwrite {
            get {
                return ResourceManager.GetString("WarnOverwrite", resourceCulture);
            }
        }
    }
}
