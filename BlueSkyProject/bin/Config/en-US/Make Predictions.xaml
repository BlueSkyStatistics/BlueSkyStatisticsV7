<BSkyCanvas internalhelpfilename="{assembly:Null}" Title="Make Predictions" ModelClasses="NaiveBayes; randomForest; lm; glm; rpart; multinom; nnet; polr;ksvm;blasso;knn3;real_adaboost;adaboost; lmerModLmerTest;xgb.Booster;C5.0;BinaryTree;lognet;glmnet;function;earth;mlp;rsnns;RandomForest;rlm;rq;ranger;gbm;train;nn" StatusTextBoxName="msgbox" customsyntax="{assembly:Null}" EditableComboBoxName="{assembly:Null}" RPackages="caret; stats;ROCR;dplyr" CanExecute="True" PrereqCommandString="predictPrerequisite('{{%MODEL%}}', '{{%DATASET%}}')" CommandString="local(&#xA;{&#xA;#Run predict&#xA;BSkyPredictions &lt;- BSkyPredict(modelname='{{%MODEL%}}', prefix='{{colname}}', confinterval ={{conflevel}}, level ={{level}}, datasetname='{{%DATASET%}}')&#xA;&#xA;# if the 'confusion matrix checkbox' is checked attempt to show the confusion matrix&#xA;showConfusionMatrix={{confusioncheck}}&#xA;if (showConfusionMatrix)&#xA;{&#xA;&#xA;if (is.null(BSkyPredictions[[3]]) &amp;&amp; str_detect(getModelDependentVariable(&quot;{{%MODEL%}}&quot;), &quot;,&quot;) )&#xA;{&#xA;msg = paste(&quot;A confusion matrix and a ROC table cannot be created as you have more than 2 dependent/reference variables namely: &quot;,getModelDependentVariable(&quot;{{%MODEL%}}&quot;))&#xA;        print(msg)&#xA;    return(msg)&#xA;}&#xA;&#xA;&#xA;if (is.null(BSkyPredictions[[3]]))&#xA;{&#xA;msg = paste(&quot;A confusion matrix and a ROC table cannot be created as the dependent/reference variable: &quot; , getModelDependentVariable(&quot;{{%MODEL%}}&quot;), &quot; cannot be found in the dataset being scored&quot;, &#xA;            collapse = &quot;&quot;, sep = &quot;&quot;)&#xA;        print(msg)&#xA;    return(msg)&#xA;}&#xA;#Generates the confusion matrix for train classes created by model tuning&#xA;if (getModelClass(&quot;{{%MODEL%}}&quot;)  == 'train')&#xA;{&#xA;results &lt;- BSkyConfusionMatrixTrain(predictions=BSkyPredictions[[1]],reference =BSkyPredictions[[3]])&#xA;}&#xA;else&#xA;{&#xA;#Creates the confusion matrix for models created by the specific modeling algorithm&#xA;results &lt;- BSkyConfusionMatrix(modelname='{{%MODEL%}}', showConfusionMatrix={{confusioncheck}}, predictions=BSkyPredictions[[1]] , datasetname='{{%DATASET%}}')&#xA;}&#xA;}&#xA;&#xA;ROC=BSkyPredictions[[4]]&#xA;&#xA;if ({{roctable}} &amp;&amp; !ROC)&#xA;{&#xA;cat(&quot;\nWe cannot show a ROC curve. \nThis may be due to the model type not supporting predicted probabilities or the dependent variable not having 2 levels&quot;)&#xA;}&#xA;&#xA;if (ROC &amp;&amp; {{roctable}})&#xA;{&#xA;#Added the numeric condition 08/15/2020 to address ROC table not working with Model Fitting -&gt; Extreme Boosting&#xA;   if( class(BSkyPredictions[[3]] )  == 'logical'  || class(BSkyPredictions[[3]] )  == 'numeric')&#xA;    {&#xA;        BSkyPredictions[[3]] = as.factor( BSkyPredictions[[3]] )&#xA;    }&#xA;&#xA;  if( getModelClass(&quot;{{%MODEL%}}&quot;)  == 'glm' )&#xA; {&#xA; if (eval( parse(text=paste (&quot;family(&quot; ,&quot;{{%MODEL%}}&quot;, &quot;)$family&quot;, sep='', collapse='') )) ==&quot;binomial&quot; )&#xA; {&#xA;    BSkyPredictions[[3]] = as.factor( BSkyPredictions[[3]] )&#xA; }&#xA; }&#xA;&#xA; results &lt;-createROCTable(predictedprobs =BSkyPredictions[[2]],dependentvariable =BSkyPredictions[[3]], modelname=&quot;{{%MODEL%}}&quot;,datasetname =&quot;{{%DATASET%}}&quot;)&#xA; BSkyFormat(results, singleTableOutputHeader='ROC Table')&#xA;    pr &lt;- ROCR::prediction(BSkyPredictions[[2]], BSkyPredictions[[3]], label.ordering = levels(BSkyPredictions[[3]]))&#xD;&#xA;    attributes(pr)$cutoffs[[1]][attributes(pr)$cutoffs[[1]]==Inf]&lt;-1&#xA;    prf &lt;- ROCR::performance(pr, measure = &quot;tpr&quot;, x.measure = &quot;fpr&quot;)&#xA;    attributes(prf)$cutoffs[[1]][attributes(prf)$cutoffs[[1]]==Inf]&lt;-1   &#xD;&#xA;    plot(prf, main = &quot;ROC Curve&quot;)&#xA;    auc &lt;- ROCR::performance(pr, measure = &quot;auc&quot;)&#xA;    auc &lt;- auc@y.values[[1]]&#xA;    cat( paste(&quot;The area under the curve (AUC) is&quot;,auc,sep=&quot; &quot;))&#xA;    perf &lt;- ROCR::performance(pr, &quot;sens&quot;, &quot;spec&quot;)&#xA;    plot(perf, colorize=TRUE, lwd= 3, main=&quot;... Sensitivity/Specificity plots ...&quot;)&#xA;}&#xA;}&#xA;)&#xA;#Refresh dataset&#xA;BSkyLoadRefreshDataframe({{%DATASET%}})" dlgsyntax="local(&#xA;{&#xA;#Run predict&#xA;BSkyPredictions &lt;- BSkyPredict(modelname='{{%MODEL%}}', prefix='{{colname}}', confinterval ={{conflevel}}, level ={{level}}, datasetname='{{%DATASET%}}')&#xA;&#xA;# if the 'confusion matrix checkbox' is checked attempt to show the confusion matrix&#xA;showConfusionMatrix={{confusioncheck}}&#xA;if (showConfusionMatrix)&#xA;{&#xA;&#xA;if (is.null(BSkyPredictions[[3]]) &amp;&amp; str_detect(getModelDependentVariable(&quot;{{%MODEL%}}&quot;), &quot;,&quot;) )&#xA;{&#xA;msg = paste(&quot;A confusion matrix and a ROC table cannot be created as you have more than 2 dependent/reference variables namely: &quot;,getModelDependentVariable(&quot;{{%MODEL%}}&quot;))&#xA;        print(msg)&#xA;    return(msg)&#xA;}&#xA;&#xA;&#xA;if (is.null(BSkyPredictions[[3]]))&#xA;{&#xA;msg = paste(&quot;A confusion matrix and a ROC table cannot be created as the dependent/reference variable: &quot; , getModelDependentVariable(&quot;{{%MODEL%}}&quot;), &quot; cannot be found in the dataset being scored&quot;, &#xA;            collapse = &quot;&quot;, sep = &quot;&quot;)&#xA;        print(msg)&#xA;    return(msg)&#xA;}&#xA;#Generates the confusion matrix for train classes created by model tuning&#xA;if (getModelClass(&quot;{{%MODEL%}}&quot;)  == 'train')&#xA;{&#xA;results &lt;- BSkyConfusionMatrixTrain(predictions=BSkyPredictions[[1]],reference =BSkyPredictions[[3]])&#xA;}&#xA;else&#xA;{&#xA;#Creates the confusion matrix for models created by the specific modeling algorithm&#xA;results &lt;- BSkyConfusionMatrix(modelname='{{%MODEL%}}', showConfusionMatrix={{confusioncheck}}, predictions=BSkyPredictions[[1]] , datasetname='{{%DATASET%}}')&#xA;}&#xA;}&#xA;&#xA;ROC=BSkyPredictions[[4]]&#xA;&#xA;if ({{roctable}} &amp;&amp; !ROC)&#xA;{&#xA;cat(&quot;\nWe cannot show a ROC curve. \nThis may be due to the model type not supporting predicted probabilities or the dependent variable not having 2 levels&quot;)&#xA;}&#xA;&#xA;if (ROC &amp;&amp; {{roctable}})&#xA;{&#xA;#Added the numeric condition 08/15/2020 to address ROC table not working with Model Fitting -&gt; Extreme Boosting&#xA;   if( class(BSkyPredictions[[3]] )  == 'logical'  || class(BSkyPredictions[[3]] )  == 'numeric')&#xA;    {&#xA;        BSkyPredictions[[3]] = as.factor( BSkyPredictions[[3]] )&#xA;    }&#xA;&#xA;  if( getModelClass(&quot;{{%MODEL%}}&quot;)  == 'glm' )&#xA; {&#xA; if (eval( parse(text=paste (&quot;family(&quot; ,&quot;{{%MODEL%}}&quot;, &quot;)$family&quot;, sep='', collapse='') )) ==&quot;binomial&quot; )&#xA; {&#xA;    BSkyPredictions[[3]] = as.factor( BSkyPredictions[[3]] )&#xA; }&#xA; }&#xA;&#xA; results &lt;-createROCTable(predictedprobs =BSkyPredictions[[2]],dependentvariable =BSkyPredictions[[3]], modelname=&quot;{{%MODEL%}}&quot;,datasetname =&quot;{{%DATASET%}}&quot;)&#xA; BSkyFormat(results, singleTableOutputHeader='ROC Table')&#xA;    pr &lt;- ROCR::prediction(BSkyPredictions[[2]], BSkyPredictions[[3]], label.ordering = levels(BSkyPredictions[[3]]))&#xD;&#xA;    attributes(pr)$cutoffs[[1]][attributes(pr)$cutoffs[[1]]==Inf]&lt;-1&#xA;    prf &lt;- ROCR::performance(pr, measure = &quot;tpr&quot;, x.measure = &quot;fpr&quot;)&#xA;    attributes(prf)$cutoffs[[1]][attributes(prf)$cutoffs[[1]]==Inf]&lt;-1   &#xD;&#xA;    plot(prf, main = &quot;ROC Curve&quot;)&#xA;    auc &lt;- ROCR::performance(pr, measure = &quot;auc&quot;)&#xA;    auc &lt;- auc@y.values[[1]]&#xA;    cat( paste(&quot;The area under the curve (AUC) is&quot;,auc,sep=&quot; &quot;))&#xA;    perf &lt;- ROCR::performance(pr, &quot;sens&quot;, &quot;spec&quot;)&#xA;    plot(perf, colorize=TRUE, lwd= 3, main=&quot;... Sensitivity/Specificity plots ...&quot;)&#xA;}&#xA;}&#xA;)&#xA;#Refresh dataset&#xA;BSkyLoadRefreshDataframe({{%DATASET%}})" Helpfile="{assembly:Null}" splitProcessing="False" DatasetRequired="True" MenuLocation="{assembly:Null}" OutputDefinition="{assembly:Null}" Width="565" Command="False" Height="500" HelpText="&lt;html&gt;&lt;head&gt;&lt;style type=&quot;text/css&quot;&gt;.c0 { color: Black } .c1 { margin: 0px 0px 10px } .c2 { font-weight: bold; font-size: 14.6666660308838px; line-height: 1.14999997615814; font-family: 'Arial' } .c3 { font-weight: normal; font-size: 14.6666660308838px; line-height: 1.14999997615814; font-family: 'Arial' } .c4 { margin: 0px 0px 13px; line-height: 1.14999997615814; font-size: 11px; font-family: 'Arial' } .c5 { font-weight: normal; font-size: 14.6666660308838px } .c6 { font-weight: bold; font-size: 14.6666660308838px } .c7 { margin: 0px 0px 10px; font-size: 11px; font-family: 'Arial' } .c8 { font-weight: bold; font-size: 14.6666660308838px; font-family: 'Arial' } .c9 { font-weight: normal; font-size: 14.6666660308838px; font-family: 'Arial' } .c10 { font-weight: bold; font-size: 14.6666660308838px; font-family: 'Arial'; text-decoration: underline } .c11 { margin: 0px 0px 10px; line-height: 1.14999997615814; font-size: 11px; font-family: 'Arial' } &lt;/style&gt;&lt;/head&gt;&lt;body class=&quot;c0&quot;&gt;&lt;p class=&quot;c1&quot;&gt;&amp;#x200b;&lt;span&gt;&lt;span class=&quot;c2&quot;&gt;Description:&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;c3&quot;&gt;&amp;#x200b;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c4&quot;&gt;&lt;span&gt;&lt;span class=&quot;c5&quot;&gt;predict is a generic function for predictions from the results of various model fitting functions. The function invokes particular methods which depend on the class of the first argument.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c4&quot;&gt;&lt;span&gt;&lt;span class=&quot;c6&quot;&gt;Usage:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c4&quot;&gt;&lt;span&gt;&lt;span class=&quot;c5&quot;&gt;BSkyPredict(modelname, prefix, datasetname)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c4&quot;&gt;&lt;span&gt;&lt;span class=&quot;c6&quot;&gt;Arguments:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c4&quot;&gt;&lt;span&gt;&lt;span class=&quot;c5&quot;&gt;modelname : a model object for which prediction is desired.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c4&quot;&gt;&lt;span&gt;&lt;span class=&quot;c5&quot;&gt;prefix : &amp;#160;prefix string that will be used as a name for new column. If there are multiple columns then this string is prepended to the each column name.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c7&quot;&gt;&lt;span&gt;&lt;span class=&quot;c5&quot;&gt;datasetname: is the current datasetname using which we want to make predictions.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c7&quot;&gt;&lt;span&gt;&lt;span class=&quot;c5&quot;&gt;&amp;#160;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;c6&quot;&gt;Package: BlueSky, stats&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;c8&quot;&gt;&amp;#x200b;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;c9&quot;&gt;&amp;#x200b;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c7&quot;&gt;&lt;span&gt;&lt;span class=&quot;c9&quot;&gt;&amp;#x200b;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c7&quot;&gt;&lt;span&gt;&lt;span class=&quot;c10&quot;&gt;NOTE:&amp;#160;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;c9&quot;&gt;Confusion Matrix will also be generated where ever applicable if user selected the checkbox option. Here are the details related to confusion matrix:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c4&quot;&gt;&lt;span&gt;&lt;span class=&quot;c8&quot;&gt;Description:&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;c9&quot;&gt;&amp;#x200b;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c4&quot;&gt;&lt;span&gt;&lt;span class=&quot;c9&quot;&gt;Calculates a cross-tabulation of observed and predicted classes with associated statistics.&amp;#160;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c4&quot;&gt;&lt;span&gt;&lt;span class=&quot;c8&quot;&gt;Usage:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c4&quot;&gt;&lt;span&gt;&lt;span class=&quot;c9&quot;&gt;BSkyConfusionMartix(modelname,showCofusionMatrix,predictions,datasetname)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c4&quot;&gt;&lt;span&gt;&lt;span class=&quot;c8&quot;&gt;Arguments:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c4&quot;&gt;&lt;span&gt;&lt;span class=&quot;c9&quot;&gt;modelname : a model object for which confusion matrix is desired.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c4&quot;&gt;&lt;span&gt;&lt;span class=&quot;c9&quot;&gt;showCofusionMatrix: &amp;#160;logical, if TRUE the confusion matrix is generated (if it applies), if FALSE, confusion matrix is not generated.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c4&quot;&gt;&lt;span&gt;&lt;span class=&quot;c9&quot;&gt;predictions : an object that is returned as a result of predict() call.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c7&quot;&gt;&lt;span&gt;&lt;span class=&quot;c9&quot;&gt;datasetname: is the current datasetname using which we want to make predictions.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c7&quot;&gt;&lt;span&gt;&lt;span class=&quot;c9&quot;&gt;&amp;#160;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;c8&quot;&gt;Package: BlueSky, caret&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;c8&quot;&gt;&amp;#x200b;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;c9&quot;&gt;&amp;#x200b;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c11&quot;&gt;&lt;span&gt;&lt;span class=&quot;c8&quot;&gt;&amp;#160;Other:&amp;#160;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;c9&quot;&gt;Click the R Help button to get detailed R help&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;c9&quot;&gt;&amp;#x200b;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;c9&quot;&gt;&amp;#x200b;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c4&quot;&gt;&lt;span&gt;&lt;span class=&quot;c9&quot;&gt;&amp;#x200b;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;" RHelpText="help(predict, package=stats)" Background="#FFEEEFFF" xmlns="clr-namespace:BSky.Controls;assembly=BSky.Controls" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:av="http://schemas.microsoft.com/winfx/2006/xaml/presentation"><BSkyLabel Name="lbl5" Text="Specify column name prefix" Width="163" Height="29" Left="15" Top="297" CanExecute="False" FontFamily="Segoe UI" FontSize="12" av:Canvas.Left="15" av:Canvas.Top="297">Specify column name prefix</BSkyLabel><BSkyTextBox PrefixTxt="{assembly:Null}" OverWriteExistingVariables="False" OverwriteSettings="PromptBeforeOverwritingVariables" Name="colname" Width="50" Height="30" Left="186.6" Top="296.8" SubstituteSettings="TextAsIs" CanExecute="False" Enabled="True" Syntax="%%VALUE%%" TextWrapping="Wrap" AcceptsTab="True" VerticalScrollBarVisibility="Auto" FontFamily="Segoe UI" FontSize="12" VerticalContentAlignment="Center" Template="{av:DynamicResource TextBoxBaseControlTemplate}" AllowDrop="True" IsEnabled="True" av:Canvas.Left="186.6" av:Canvas.Top="296.8" xml:space="preserve"><BSkyTextBox.TextChangedBehaviour><BehaviourCollection Capacity="4"><Behaviour><Behaviour.Condition><Condition PropertyName="Text" Value="{assembly:Null}" Operator="isNullOrEmpty" /></Behaviour.Condition><Behaviour.Setters><PropertySettersCollection Capacity="4"><PropertySetter ControlName="colname" PropertyName="CanExecute" Value="False" /></PropertySettersCollection></Behaviour.Setters></Behaviour><Behaviour><Behaviour.Condition><Condition PropertyName="Text" Value="{assembly:Null}" Operator="ValidString" /></Behaviour.Condition><Behaviour.Setters><PropertySettersCollection Capacity="4"><PropertySetter ControlName="colname" PropertyName="CanExecute" Value="True" /></PropertySettersCollection></Behaviour.Setters></Behaviour></BehaviourCollection></BSkyTextBox.TextChangedBehaviour><BSkyTextBox.Style><av:Style TargetType="av:TextBox"><av:Style.Resources><av:ResourceDictionary /></av:Style.Resources><av:Setter Property="av:UIElement.Effect"><av:Setter.Value><av:DropShadowEffect Color="#FFF5F5DC" /></av:Setter.Value></av:Setter></av:Style></BSkyTextBox.Style></BSkyTextBox><BSkyCheckBox Name="confusioncheck" Text="Generate Confusion Matrix" Width="174" Height="26" Left="20" Top="400.2" IsSelected="False" Enabled="True" CanExecute="True" Syntax="%%VALUE%%" uncheckedsyntax="FALSE" IsChecked="False" FontFamily="Segoe UI" FontSize="12" Style="{av:DynamicResource CheckBoxTemplate}" IsEnabled="True" av:Canvas.Left="20" av:Canvas.Top="400.2"><BSkyCheckBox.CheckedChangeBehaviour><BehaviourCollection Capacity="4" /></BSkyCheckBox.CheckedChangeBehaviour>Generate Confusion Matrix</BSkyCheckBox><BSkyMultiLineLabel Name="msgbox" Width="542" Height="180" Left="14" Top="33" CanExecute="True" TextWrapping="Wrap" AcceptsTab="True" VerticalScrollBarVisibility="Auto" FontFamily="Segoe UI" FontSize="12" VerticalContentAlignment="Top" Template="{av:DynamicResource TextBoxControlTemplateMultiline}" av:Canvas.Left="14" av:Canvas.Top="33" xml:space="preserve"><BSkyMultiLineLabel.Style><av:Style TargetType="av:TextBox"><av:Style.Resources><av:ResourceDictionary /></av:Style.Resources><av:Setter Property="av:UIElement.Effect"><av:Setter.Value><av:DropShadowEffect Color="#FFF5F5DC" /></av:Setter.Value></av:Setter></av:Style></BSkyMultiLineLabel.Style></BSkyMultiLineLabel><BSkyLabel Name="lbl11" Text="Status Message:" Width="171" Height="27" Left="9" Top="0" CanExecute="False" FontFamily="Segoe UI" FontSize="12" av:Canvas.Left="9" av:Canvas.Top="0">Status Message:</BSkyLabel><BSkyLabelReqdField Name="rq1" Text="*" Width="15" Height="25" Left="164" Top="290" CanExecute="False" Foreground="#FFFF0000" FontFamily="Segoe UI" FontSize="12" FontWeight="Bold" av:Canvas.Left="164" av:Canvas.Top="290">*</BSkyLabelReqdField><BSkyCheckBox Name="roctable" Text="Show ROC table (**For binary dependent variables only)" Width="326.333333333333" Height="17.9999999999999" Left="20" Top="453.8" IsSelected="False" Enabled="True" CanExecute="True" Syntax="%%VALUE%%" uncheckedsyntax="FALSE" IsChecked="False" FontFamily="Segoe UI" FontSize="12" Style="{av:DynamicResource CheckBoxTemplate}" IsEnabled="True" av:Canvas.Left="20" av:Canvas.Top="453.8"><BSkyCheckBox.CheckedChangeBehaviour><BehaviourCollection Capacity="0" /></BSkyCheckBox.CheckedChangeBehaviour>Show ROC table (**For binary dependent variables only)</BSkyCheckBox><BSkyLabel Name="cxs" Text="**Checking the checkbox above will incur a performance penalty for large datasets." Width="476.266666666667" Height="26.8666666666666" Left="33" Top="465" CanExecute="False" FontFamily="Segoe UI" FontSize="12" av:Canvas.Left="33" av:Canvas.Top="465">**Checking the checkbox above will incur a performance penalty for large datasets.</BSkyLabel><BSkyLabel Name="lanpred" Text="Predictions and predicted probabilities where applicable are stored in the dataset being scored as " Width="541" Height="30" Left="15" Top="257" CanExecute="False" FontFamily="Segoe UI" FontSize="12" av:Canvas.Left="15" av:Canvas.Top="257" xml:space="preserve">Predictions and predicted probabilities where applicable are stored in the dataset being scored as </BSkyLabel><BSkyLabel Name="labnbv" Text="new variables with prefix below" Width="175.4" Height="26.0000000000001" Left="15" Top="277" CanExecute="False" FontFamily="Segoe UI" FontSize="12" av:Canvas.Left="15" av:Canvas.Top="277">new variables with prefix below</BSkyLabel><BSkyGroupBox Name="grp" HeaderText="Save predicted values and supporting statistics." Text="{assembly:Null}" Width="550.6" Height="152.8" Left="10" Top="238" Header="Save predicted values and supporting statistics." Content="{assembly:Null}" BorderBrush="#FFA9A9A9" IsHitTestVisible="True" av:Canvas.Left="10" av:Canvas.Top="238" /><BSkyCheckBox Name="conflevel" Text="Save confidence intervals for individual predicted values  **(Valid only for linear models (class lm))" Width="531.8" Height="33.6" Left="20" Top="331.6" IsSelected="False" Enabled="True" CanExecute="True" Syntax="TRUE" uncheckedsyntax="FALSE" IsChecked="False" FontFamily="Segoe UI" FontSize="12" Style="{av:DynamicResource CheckBoxTemplate}" IsEnabled="True" av:Canvas.Left="20" av:Canvas.Top="331.6" xml:space="preserve"><BSkyCheckBox.CheckedChangeBehaviour><BehaviourCollection Capacity="4"><Behaviour><Behaviour.Condition><Condition PropertyName="IsSelected" Value="True" Operator="Equals" /></Behaviour.Condition><Behaviour.Setters><PropertySettersCollection Capacity="4"><PropertySetter ControlName="level" PropertyName="SliderValue" Value="0.95" /></PropertySettersCollection></Behaviour.Setters></Behaviour><Behaviour><Behaviour.Condition><Condition PropertyName="IsSelected" Value="False" Operator="Equals" /></Behaviour.Condition><Behaviour.Setters><PropertySettersCollection Capacity="4"><PropertySetter ControlName="level" PropertyName="SliderValue" Value="0" /><PropertySetter ControlName="level" PropertyName="Enabled" Value="False" /></PropertySettersCollection></Behaviour.Setters></Behaviour></BehaviourCollection></BSkyCheckBox.CheckedChangeBehaviour>Save confidence intervals for individual predicted values  **(Valid only for linear models (class lm))</BSkyCheckBox><BSkyAdvancedSlider SliderValue="0" Name="level" Maximum="1" Minimum="0" TickFrequency="0.1" Width="135" Height="45" Left="191.8" Top="343" Enabled="True" CanExecute="True" Syntax="{assembly:Null}" IsEnabled="True" av:Canvas.Left="191.8" av:Canvas.Top="343"></BSkyAdvancedSlider><BSkyLabel Name="conflevellab" Text="Specify the confidence level" Width="161.2" Height="32.2" Left="32" Top="349.6" CanExecute="False" FontFamily="Segoe UI" FontSize="12" av:Canvas.Left="32" av:Canvas.Top="349.6">Specify the confidence level</BSkyLabel><BSkyLabel Name="ss" Text="**For dependent variables with 2 levels, the 2nd level is treated as the positive level. See Data &gt; " Width="536.4" Height="25.8" Left="17.2000000000001" Top="414" CanExecute="False" FontFamily="Segoe UI" FontSize="12" av:Canvas.Left="17.2000000000001" av:Canvas.Top="414" xml:space="preserve">**For dependent variables with 2 levels, the 2nd level is treated as the positive level. See Data &gt; </BSkyLabel><BSkyLabel Name="cdx" Text="Factor Levels &gt; Reorder Levels Manually to change the order of factor levels and rebuild the model." Width="536.4" Height="26.6" Left="16.6" Top="428.6" CanExecute="False" FontFamily="Segoe UI" FontSize="12" av:Canvas.Left="16.6" av:Canvas.Top="428.6">Factor Levels &gt; Reorder Levels Manually to change the order of factor levels and rebuild the model.</BSkyLabel></BSkyCanvas>