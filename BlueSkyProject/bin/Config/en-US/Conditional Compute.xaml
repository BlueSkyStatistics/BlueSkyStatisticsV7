<BSkyCanvas internalhelpfilename="{assembly:Null}" Title="Conditional Compute" ModelClasses="{assembly:Null}" StatusTextBoxName="{assembly:Null}" customsyntax="{assembly:Null}" EditableComboBoxName="{assembly:Null}" RPackages="stringr" CanExecute="True" PrereqCommandString="{assembly:Null}" CommandString="#If you are computing a new variable, we initialize the new variable to hold NAs&#xA;if ( is.null({{text5}}))&#xA;{&#xA;{{text5}} &lt;-NA&#xA;}&#xA;#Runs the conditional compute&#xA;{{text5}}[ with( {{%DATASET%}}, which({{expr}} ) )]&lt;-{{text4}}&#xA;#Refreshes the dataset in the grid&#xA;BSkyLoadRefreshDataframe({{%DATASET%}})&#xA;&#xA;&#xA;" dlgsyntax="#If you are computing a new variable, we initialize the new variable to hold NAs&#xA;if ( is.null({{text5}}))&#xA;{&#xA;{{text5}} &lt;-NA&#xA;}&#xA;#Runs the conditional compute&#xA;{{text5}}[ with( {{%DATASET%}}, which({{expr}} ) )]&lt;-{{text4}}&#xA;#Refreshes the dataset in the grid&#xA;BSkyLoadRefreshDataframe({{%DATASET%}})&#xA;&#xA;&#xA;" Helpfile="{assembly:Null}" splitProcessing="False" DatasetRequired="True" MenuLocation="{assembly:Null}" OutputDefinition="" Width="825" Command="False" Height="555" HelpText="&lt;html&gt;&lt;head&gt;&lt;style type=&quot;text/css&quot;&gt;.c0 { color: Black } .c1 { margin: 0px 0px 10px } .c2 { font-weight: bold; font-size: 16px; font-family: 'Times New Roman','Times New Roman' } .c3 { font-size: 14.6666666666667px; font-family: 'Calibri','Trebuchet MS' } .c4 { font-size: 14.6666666666667px; font-family: 'Calibri','Trebuchet MS'; font-weight: normal } .c5 { font-weight: normal } .c6 { font-size: 14.6666666666667px; font-family: 'Calibri','Trebuchet MS'; font-style: italic; font-weight: normal } .c7 { width: 100% } .c8 { vertical-align: middle } .c9 { font-weight: bold } .c10 { vertical-align: middle; text-align: right } .c11 { margin: 0px 0px 12px; font-size: 16.5px; font-weight: bold } .c12 { margin: 0px 0px 11px; font-size: 12.87px; font-weight: bold } .c13 { font-family: 'Courier New' } .c14 { vertical-align: top } .c15 { margin: 0px 0px 12px } .c16 { color: Blue; text-decoration: underline; font-family: 'Courier New' } .c17 { margin: 0px 0px 10px; font-size: 16px; font-family: 'Times New Roman','Times New Roman' } .c18 { font-weight: bold; font-size: 13.3333333333333px } &lt;/style&gt;&lt;/head&gt;&lt;body class=&quot;c0&quot;&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&lt;span class=&quot;c3&quot;&gt;Description:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&lt;/span&gt;&lt;span class=&quot;c4&quot;&gt;Compute a new variable or modify an existing variable based on a conditional expression. For example, you have the following 4 variables -Zipcode, Income, Number of homes and Savings &amp;#160;and you want to create a new variable with the following 2 levels&amp;#160;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&lt;span class=&quot;c4&quot;&gt;-Wealthy&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&lt;span class=&quot;c4&quot;&gt;-Not wealthy&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&lt;span&gt;&lt;span class=&quot;c5&quot;&gt;&amp;#x200b;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;c6&quot;&gt;The conditional expression would be&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&lt;span class=&quot;c4&quot;&gt;zipcode == 90310 | income &amp;gt; 200000 | number of homes &amp;gt; 3 | savings &amp;gt; 1000000&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&lt;span&gt;&lt;span class=&quot;c5&quot;&gt;&amp;#x200b;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;c6&quot;&gt;The True expression will be&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&lt;span class=&quot;c4&quot;&gt;Wealthy&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&lt;span&gt;&lt;span class=&quot;c5&quot;&gt;&amp;#x200b;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;c6&quot;&gt;The False expression will be&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&lt;span class=&quot;c4&quot;&gt;Poor&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;#x200b;&lt;/span&gt;To retain the values in the destination new/existing variable if the condition is false, just enter the variable name of the&amp;#160;&lt;span&gt;&lt;span class=&quot;c2&quot;&gt;new/existing variable&amp;#160;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&lt;span class=&quot;c3&quot;&gt;&amp;#x200b;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&lt;span class=&quot;c4&quot;&gt;Other examples of common conditions and associated syntax are below&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&lt;span class=&quot;c4&quot;&gt;Replacing empty values: is.na(var4)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&lt;span class=&quot;c4&quot;&gt;Complex condition:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&lt;span class=&quot;c4&quot;&gt;(var1!=10 &amp;amp; var2&amp;gt;20)|var3==40&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&lt;span class=&quot;c4&quot;&gt;Is XXX a substring of var1?:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span class=&quot;c2&quot;&gt;&lt;span class=&quot;c4&quot;&gt;grepl(&amp;quot;XXX&amp;quot;,var1)==TRUE&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;table class=&quot;c7&quot;&gt;&lt;col/&gt;&lt;col/&gt;&lt;tbody class=&quot;c8&quot;&gt;&lt;tr class=&quot;c8&quot;&gt;&lt;td class=&quot;c8&quot;&gt;&lt;span class=&quot;c9&quot;&gt;&amp;#x200b;&lt;/span&gt;&lt;p class=&quot;c1&quot;&gt;&amp;#x200b;&amp;#x200b;&lt;/p&gt;&lt;/td&gt;&lt;td class=&quot;c10&quot;&gt;&amp;#x200b;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div&gt;&lt;span class=&quot;c11&quot;&gt;ifelse &amp;#160;&lt;/span&gt;&lt;span class=&quot;c11&quot;&gt;Conditional Element Selection&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;c12&quot;&gt;Description&lt;/span&gt;&lt;/div&gt;&lt;p class=&quot;c1&quot;&gt;&lt;span&gt;&lt;span class=&quot;c13&quot;&gt;ifelse&lt;/span&gt;&lt;/span&gt;&amp;#160;returns a value with the same shape as&amp;#160;&lt;span&gt;&lt;span class=&quot;c13&quot;&gt;test&lt;/span&gt;&lt;/span&gt;&amp;#160;which is filled with elements selected from either&amp;#160;&lt;span&gt;&lt;span class=&quot;c13&quot;&gt;yes&lt;/span&gt;&lt;/span&gt;&amp;#160;or&amp;#160;&lt;span&gt;&lt;span class=&quot;c13&quot;&gt;no&lt;/span&gt;&lt;/span&gt;&amp;#160;depending on whether the element of&amp;#160;&lt;span&gt;&lt;span class=&quot;c13&quot;&gt;test&lt;/span&gt;&lt;/span&gt;&amp;#160;is&amp;#160;&lt;span&gt;&lt;span class=&quot;c13&quot;&gt;TRUE&lt;/span&gt;&lt;/span&gt;&amp;#160;or&amp;#160;&lt;span&gt;&lt;span class=&quot;c13&quot;&gt;FALSE&lt;/span&gt;&lt;/span&gt;.&lt;/p&gt;&lt;div&gt;&lt;span class=&quot;c12&quot;&gt;Usage&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;span class=&quot;c13&quot;&gt;ifelse(test, yes, no)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;span class=&quot;c13&quot;&gt;Dataset$var &amp;#160;= with(Dataset2,ifelse (is.na(var),2000,var ))&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;span class=&quot;c13&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;c12&quot;&gt;Arguments&lt;/span&gt;&lt;/div&gt;&lt;table&gt;&lt;col/&gt;&lt;col/&gt;&lt;tbody class=&quot;c8&quot;&gt;&lt;tr class=&quot;c14&quot;&gt;&lt;td class=&quot;c14&quot;&gt;&lt;span&gt;&lt;span class=&quot;c13&quot;&gt;test&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td class=&quot;c14&quot;&gt;&lt;p class=&quot;c15&quot;&gt;an object which can be coerced to logical mode for e.g. is.na(var), var is a string containing the variable name&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;c14&quot;&gt;&lt;td class=&quot;c14&quot;&gt;&lt;span&gt;&lt;span class=&quot;c13&quot;&gt;yes&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td class=&quot;c14&quot;&gt;&lt;p class=&quot;c15&quot;&gt;return values for true elements of&amp;#160;&lt;span&gt;&lt;span class=&quot;c13&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;c13&quot;&gt;, for e.g. 2000&lt;/span&gt;&lt;/span&gt;&amp;#x200b;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class=&quot;c14&quot;&gt;&lt;td class=&quot;c14&quot;&gt;&lt;span&gt;&lt;span class=&quot;c13&quot;&gt;no&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td class=&quot;c14&quot;&gt;&lt;p class=&quot;c15&quot;&gt;return values for false elements of&amp;#160;&lt;span&gt;&lt;span class=&quot;c13&quot;&gt;test&lt;/span&gt;&lt;/span&gt;. To retain the original values of the new/existing variable if condition is false, enter the variable name&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div&gt;&lt;span class=&quot;c12&quot;&gt;Details&lt;/span&gt;&lt;/div&gt;&lt;p class=&quot;c1&quot;&gt;If&amp;#160;&lt;span&gt;&lt;span class=&quot;c13&quot;&gt;yes&lt;/span&gt;&lt;/span&gt;&amp;#160;or&amp;#160;&lt;span&gt;&lt;span class=&quot;c13&quot;&gt;no&lt;/span&gt;&lt;/span&gt;&amp;#160;are too short, their elements are recycled.&amp;#160;&lt;span&gt;&lt;span class=&quot;c13&quot;&gt;yes&lt;/span&gt;&lt;/span&gt;&amp;#160;will be evaluated if and only if any element of&amp;#160;&lt;span&gt;&lt;span class=&quot;c13&quot;&gt;test&lt;/span&gt;&lt;/span&gt;&amp;#160;is true, and analogously for&amp;#160;&lt;span&gt;&lt;span class=&quot;c13&quot;&gt;no&lt;/span&gt;&lt;/span&gt;.&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;Missing values in&amp;#160;&lt;span&gt;&lt;span class=&quot;c13&quot;&gt;test&lt;/span&gt;&lt;/span&gt;&amp;#160;give missing values in the result.&lt;/p&gt;&lt;div&gt;&lt;span class=&quot;c12&quot;&gt;Value&lt;/span&gt;&lt;/div&gt;&lt;p class=&quot;c1&quot;&gt;A vector of the same length and attributes (including dimensions and&amp;#160;&lt;span&gt;&lt;span class=&quot;c13&quot;&gt;&amp;quot;class&amp;quot;&lt;/span&gt;&lt;/span&gt;) as&amp;#160;&lt;span&gt;&lt;span class=&quot;c13&quot;&gt;test&lt;/span&gt;&lt;/span&gt;&amp;#160;and data values from the values of&amp;#160;&lt;span&gt;&lt;span class=&quot;c13&quot;&gt;yes&lt;/span&gt;&lt;/span&gt;&amp;#160;or&amp;#160;&lt;span&gt;&lt;span class=&quot;c13&quot;&gt;no&lt;/span&gt;&lt;/span&gt;. The mode of the answer will be coerced from logical to accommodate first any values taken from&amp;#160;&lt;span&gt;&lt;span class=&quot;c13&quot;&gt;yes&lt;/span&gt;&lt;/span&gt;&amp;#160;and then any values taken from&amp;#160;&lt;span&gt;&lt;span class=&quot;c13&quot;&gt;no&lt;/span&gt;&lt;/span&gt;.&lt;/p&gt;&lt;div&gt;&lt;span class=&quot;c12&quot;&gt;Warning&lt;/span&gt;&lt;/div&gt;&lt;p class=&quot;c1&quot;&gt;The mode of the result may depend on the value of&amp;#160;&lt;span&gt;&lt;span class=&quot;c13&quot;&gt;test&lt;/span&gt;&lt;/span&gt;&amp;#160;(see the examples), and the class attribute (see&amp;#160;&lt;a href=&quot;http://127.0.0.1:23570/library/base/help/oldClass&quot; class=&quot;c16&quot;&gt;oldClass&lt;/a&gt;) of the result is taken from&amp;#160;&lt;span&gt;&lt;span class=&quot;c13&quot;&gt;test&lt;/span&gt;&lt;/span&gt;&amp;#160;and may be inappropriate for the values selected from&amp;#160;&lt;span&gt;&lt;span class=&quot;c13&quot;&gt;yes&lt;/span&gt;&lt;/span&gt;&amp;#160;and&amp;#160;&lt;span&gt;&lt;span class=&quot;c13&quot;&gt;no&lt;/span&gt;&lt;/span&gt;.&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;Sometimes it is better to use a construction such as&lt;/p&gt;&lt;div&gt;&lt;span&gt;&lt;span class=&quot;c13&quot;&gt;&amp;#160;&amp;#160;(tmp &amp;lt;- yes; tmp[!test] &amp;lt;- no[!test]; tmp)&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;p class=&quot;c1&quot;&gt;, possibly extended to handle missing values in&amp;#160;&lt;span&gt;&lt;span class=&quot;c13&quot;&gt;test&lt;/span&gt;&lt;/span&gt;.&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;Further note that&amp;#160;&lt;span&gt;&lt;span class=&quot;c13&quot;&gt;if(test) yes else no&lt;/span&gt;&lt;/span&gt;&amp;#160;is much more efficient and often much preferable to&amp;#160;&lt;span&gt;&lt;span class=&quot;c13&quot;&gt;ifelse(test, yes, no)&lt;/span&gt;&lt;/span&gt;&amp;#160;whenever&amp;#160;&lt;span&gt;&lt;span class=&quot;c13&quot;&gt;test&lt;/span&gt;&lt;/span&gt;&amp;#160;is a simple true/false result, i.e., when&amp;#160;&lt;span&gt;&lt;span class=&quot;c13&quot;&gt;length(test) == 1&lt;/span&gt;&lt;/span&gt;.&lt;/p&gt;&lt;p class=&quot;c1&quot;&gt;The&amp;#160;&lt;span&gt;&lt;span class=&quot;c13&quot;&gt;srcref&lt;/span&gt;&lt;/span&gt;&amp;#160;attribute of functions is handled specially: if&amp;#160;&lt;span&gt;&lt;span class=&quot;c13&quot;&gt;test&lt;/span&gt;&lt;/span&gt;&amp;#160;is a simple true result and&amp;#160;&lt;span&gt;&lt;span class=&quot;c13&quot;&gt;yes&lt;/span&gt;&lt;/span&gt;&amp;#160;evaluates to a function with&amp;#160;&lt;span&gt;&lt;span class=&quot;c13&quot;&gt;srcref&lt;/span&gt;&lt;/span&gt;&amp;#160;attribute,&amp;#160;&lt;span&gt;&lt;span class=&quot;c13&quot;&gt;ifelse&lt;/span&gt;&lt;/span&gt;&amp;#160;returns&amp;#160;&lt;span&gt;&lt;span class=&quot;c13&quot;&gt;yes&lt;/span&gt;&lt;/span&gt;&amp;#160;including its attribute (the same applies to a false&amp;#160;&lt;span&gt;&lt;span class=&quot;c13&quot;&gt;test&lt;/span&gt;&lt;/span&gt;&amp;#160;and&amp;#160;&lt;span&gt;&lt;span class=&quot;c13&quot;&gt;no&lt;/span&gt;&lt;/span&gt;&amp;#160;argument). This functionality is only for backwards compatibility, the form&amp;#160;&lt;span&gt;&lt;span class=&quot;c13&quot;&gt;if(test) yes else no&lt;/span&gt;&lt;/span&gt;&amp;#160;should be used whenever&amp;#160;&lt;span&gt;&lt;span class=&quot;c13&quot;&gt;yes&lt;/span&gt;&lt;/span&gt;&amp;#160;and&amp;#160;&lt;span&gt;&lt;span class=&quot;c13&quot;&gt;no&lt;/span&gt;&lt;/span&gt;&amp;#160;are functions.&lt;/p&gt;&lt;p class=&quot;c17&quot;&gt;&lt;span class=&quot;c9&quot;&gt;&lt;span class=&quot;c3&quot;&gt;Package:&amp;#160;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;c3&quot;&gt;base (available in R base installation) and typically no need to install&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;c3&quot;&gt;.&amp;#x200b;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;c17&quot;&gt;&lt;span&gt;&lt;span class=&quot;c18&quot;&gt;&amp;#x200b;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;" RHelpText="help(ifelse)" Background="#FFEDEFFF" xmlns="clr-namespace:BSky.Controls;assembly=BSky.Controls" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:av="http://schemas.microsoft.com/winfx/2006/xaml/presentation"><BSkySourceList CanExecute="True" Syntax="%%VALUE%%" summaryCtrl="False" PrefixTxt="{assembly:Null}" SepCharacter="{assembly:Null}" maxNoOfVariables="" SubstituteSettings="NoPrefix|UseComma" ordlevels="" nomlevels="" Name="srclist" AutoVar="False" renderVars="False" Filter="String|Numeric|Date|Logical|Ordinal|Nominal|Scale" Width="201.666666666667" Height="517.333333333333" Left="8" Top="25" Enabled="True" OverwriteSettings="{assembly:Null}" MoveVariables="False" SelectionMode="Extended"  AllowDrop="True" IsEnabled="True" Focusable="True" av:Canvas.Left="8" av:Canvas.Top="25" av:Grid.IsSharedSizeScope="True"><BSkySourceList.SelectionChangeBehaviour><BehaviourCollection Capacity="0" /></BSkySourceList.SelectionChangeBehaviour><BSkySourceList.Template><av:ControlTemplate TargetType="av:ListBox"><av:Border BorderThickness="1,1,1,1" CornerRadius="4,4,4,4" BorderBrush="#FF888888" Background="#FFFFFFFF"><av:ScrollViewer Margin="1,1,1,1" Focusable="False"><av:StackPanel IsItemsHost="True" Margin="0,0,0,0" /></av:ScrollViewer></av:Border></av:ControlTemplate></BSkySourceList.Template><BSkySourceList.Style><av:Style TargetType="av:ListBox"><av:Style.Resources><av:ResourceDictionary /></av:Style.Resources><av:Setter Property="av:UIElement.Effect"><av:Setter.Value><av:DropShadowEffect Color="#FFF5F5DC" /></av:Setter.Value></av:Setter></av:Style></BSkySourceList.Style></BSkySourceList><BSkyTextBox PrefixTxt="{assembly:Null}" OverWriteExistingVariables="False" AllowSpaces="True" OverwriteSettings="DontPrompt" Name="expr" Width="323.000000000001" Height="30" Left="256" Top="165.333333333333" SubstituteSettings="TextAsIs" CanExecute="False" Enabled="True" Syntax="%%VALUE%%" TextWrapping="Wrap" AcceptsTab="True" VerticalScrollBarVisibility="Auto" FontFamily="Segoe UI" FontSize="12" VerticalContentAlignment="Center" Template="{av:DynamicResource TextBoxBaseControlTemplate}" AllowDrop="True" IsEnabled="True" av:Canvas.Left="256" av:Canvas.Top="165.333333333333" xml:space="preserve"><BSkyTextBox.TextChangedBehaviour><BehaviourCollection Capacity="4"><Behaviour><Behaviour.Condition><Condition PropertyName="Text" Value="" Operator="ValidString" /></Behaviour.Condition><Behaviour.Setters><PropertySettersCollection Capacity="4"><PropertySetter ControlName="expr" PropertyName="CanExecute" Value="True" /></PropertySettersCollection></Behaviour.Setters></Behaviour><Behaviour><Behaviour.Condition><Condition PropertyName="Text" Value="" Operator="isNullOrEmpty" /></Behaviour.Condition><Behaviour.Setters><PropertySettersCollection Capacity="4"><PropertySetter ControlName="expr" PropertyName="CanExecute" Value="False" /></PropertySettersCollection></Behaviour.Setters></Behaviour></BehaviourCollection></BSkyTextBox.TextChangedBehaviour><BSkyTextBox.Style><av:Style TargetType="av:TextBox"><av:Style.Resources><av:ResourceDictionary /></av:Style.Resources><av:Setter Property="av:UIElement.Effect"><av:Setter.Value><av:DropShadowEffect Color="#FFF5F5DC" /></av:Setter.Value></av:Setter></av:Style></BSkyTextBox.Style></BSkyTextBox><BSkyLabel Name="srclbl" Text="Source Variables" Width="104" Height="23" Left="4" Top="3" CanExecute="False" FontFamily="Segoe UI" FontSize="12" av:Canvas.Left="4" av:Canvas.Top="3">Source Variables</BSkyLabel><BSkyLabel Name="eqsign" Text="=" Width="24.6666666666666" Height="22" Left="254" Top="54.3333333333333" CanExecute="False" FontFamily="Segoe UI" FontSize="12" av:Canvas.Left="254" av:Canvas.Top="54.3333333333333">=</BSkyLabel><BSkyMultiLineLabel Name="helptext" Width="321.333333333334" Height="36.6666666666667" Left="258" Top="93.666666666667" CanExecute="True" TextWrapping="Wrap" AcceptsTab="True" VerticalScrollBarVisibility="Auto" FontFamily="Segoe UI" FontSize="12" VerticalContentAlignment="Top" Template="{av:DynamicResource TextBoxControlTemplateMultiline}" av:Canvas.Left="258" av:Canvas.Top="93.666666666667" xml:space="preserve"><BSkyMultiLineLabel.Style><av:Style TargetType="av:TextBox"><av:Style.Resources><av:ResourceDictionary /></av:Style.Resources><av:Setter Property="av:UIElement.Effect"><av:Setter.Value><av:DropShadowEffect Color="#FFF5F5DC" /></av:Setter.Value></av:Setter></av:Style></BSkyMultiLineLabel.Style>Construct the appropriate CONDITIONAL expression  using the  builder below, for e.g. </BSkyMultiLineLabel><BSkygridForCompute name="aaa" TextBoxNameForSyntaxSubstitution="expr" Name="aaa" Width="325.333333333333" Height="341" av:Canvas.Left="255" av:Canvas.Top="199.666666666667" /><BSkyGroupBox Name="grp1" HeaderText="If Conditional Expression" Text="{assembly:Null}" Width="335.333333333333" Height="465" Left="250.333333333333" Top="74.666666666667" Header="If Conditional Expression" Content="{assembly:Null}" BorderBrush="#FFA9A9A9" IsHitTestVisible="True" av:Canvas.Left="250.333333333333" av:Canvas.Top="74.666666666667" /><BSkyGroupBox Name="grp3" HeaderText="Value if condition is true" Text="{assembly:Null}" Width="198" Height="176" Left="625" Top="49.0000000000001" Header="Value if condition is true" Content="{assembly:Null}" BorderBrush="#FFA9A9A9" IsHitTestVisible="True" av:Canvas.Left="625" av:Canvas.Top="49.0000000000001" /><BSkyTextBox PrefixTxt="{assembly:Null}" OverWriteExistingVariables="False" AllowSpaces="True" OverwriteSettings="DontPrompt" Name="text4" Width="180" Height="51" Left="634" Top="161" SubstituteSettings="TextAsIs" CanExecute="False" Enabled="True" Syntax="%%VALUE%%" TextWrapping="Wrap" AcceptsTab="True" VerticalScrollBarVisibility="Auto" FontFamily="Segoe UI" FontSize="12" VerticalContentAlignment="Center" Template="{av:DynamicResource TextBoxBaseControlTemplate}" AllowDrop="True" IsEnabled="True" av:Canvas.Left="634" av:Canvas.Top="161" xml:space="preserve"><BSkyTextBox.TextChangedBehaviour><BehaviourCollection Capacity="4"><Behaviour><Behaviour.Condition><Condition PropertyName="Text" Value="{assembly:Null}" Operator="isNullOrEmpty" /></Behaviour.Condition><Behaviour.Setters><PropertySettersCollection Capacity="4"><PropertySetter ControlName="text4" PropertyName="CanExecute" Value="False" /></PropertySettersCollection></Behaviour.Setters></Behaviour><Behaviour><Behaviour.Condition><Condition PropertyName="Text" Value="{assembly:Null}" Operator="ValidString" /></Behaviour.Condition><Behaviour.Setters><PropertySettersCollection Capacity="4"><PropertySetter ControlName="text4" PropertyName="CanExecute" Value="True" /></PropertySettersCollection></Behaviour.Setters></Behaviour></BehaviourCollection></BSkyTextBox.TextChangedBehaviour><BSkyTextBox.Style><av:Style TargetType="av:TextBox"><av:Style.Resources><av:ResourceDictionary /></av:Style.Resources><av:Setter Property="av:UIElement.Effect"><av:Setter.Value><av:DropShadowEffect Color="#FFF5F5DC" /></av:Setter.Value></av:Setter></av:Style></BSkyTextBox.Style></BSkyTextBox><BSkyMultiLineLabel Name="ml6" Width="177" Height="38" Left="631.666666666667" Top="67.333333333333" CanExecute="True" TextWrapping="Wrap" AcceptsTab="True" VerticalScrollBarVisibility="Auto" FontFamily="Segoe UI" FontSize="12" VerticalContentAlignment="Top" Template="{av:DynamicResource TextBoxControlTemplateMultiline}" av:Canvas.Left="631.666666666667" av:Canvas.Top="67.333333333333" xml:space="preserve"><BSkyMultiLineLabel.Style><av:Style TargetType="av:TextBox"><av:Style.Resources><av:ResourceDictionary /></av:Style.Resources><av:Setter Property="av:UIElement.Effect"><av:Setter.Value><av:DropShadowEffect Color="#FFF5F5DC" /></av:Setter.Value></av:Setter></av:Style></BSkyMultiLineLabel.Style>Enter value to set if condition is true, for e.g. </BSkyMultiLineLabel><BSkyTextBox PrefixTxt="" OverWriteExistingVariables="False" AllowSpaces="False" OverwriteSettings="DontPrompt" Name="text5" Width="332" Height="30" Left="253" Top="26" SubstituteSettings="PrefixByDatasetName" CanExecute="False" Enabled="True" Syntax="%%VALUE%%" TextWrapping="Wrap" AcceptsTab="True" VerticalScrollBarVisibility="Auto" FontFamily="Segoe UI" FontSize="12" VerticalContentAlignment="Center" Template="{av:DynamicResource TextBoxBaseControlTemplate}" AllowDrop="True" IsEnabled="True" av:Canvas.Left="253" av:Canvas.Top="26" xml:space="preserve"><BSkyTextBox.TextChangedBehaviour><BehaviourCollection Capacity="4"><Behaviour><Behaviour.Condition><Condition PropertyName="Text" Value="{assembly:Null}" Operator="isNullOrEmpty" /></Behaviour.Condition><Behaviour.Setters><PropertySettersCollection Capacity="4"><PropertySetter ControlName="text5" PropertyName="CanExecute" Value="False" /></PropertySettersCollection></Behaviour.Setters></Behaviour><Behaviour><Behaviour.Condition><Condition PropertyName="Text" Value="{assembly:Null}" Operator="ValidString" /></Behaviour.Condition><Behaviour.Setters><PropertySettersCollection Capacity="4"><PropertySetter ControlName="text5" PropertyName="CanExecute" Value="True" /></PropertySettersCollection></Behaviour.Setters></Behaviour></BehaviourCollection></BSkyTextBox.TextChangedBehaviour><BSkyTextBox.Style><av:Style TargetType="av:TextBox"><av:Style.Resources><av:ResourceDictionary /></av:Style.Resources><av:Setter Property="av:UIElement.Effect"><av:Setter.Value><av:DropShadowEffect Color="#FFF5F5DC" /></av:Setter.Value></av:Setter></av:Style></BSkyTextBox.Style></BSkyTextBox><BSkyVariableMoveButton Name="mv7" InputList="srclist" TargetList="text5" Width="30" Height="30" Left="214" Top="24" Padding="1,1,1,1" Tag="To Dest" Margin="2,2,2,2" av:Canvas.Left="214" av:Canvas.Top="24"><BSkyVariableMoveButton.Effect><av:DropShadowEffect ShadowDepth="0" Color="#C89B5F00" Direction="320" Opacity="1" /></BSkyVariableMoveButton.Effect><av:Grid><av:Image Source="pack://application:,,,/BSky.Controls;component/Resources/left.png" /></av:Grid></BSkyVariableMoveButton><BSkyVariableMoveButton Name="move8" InputList="srclist" TargetList="expr" Width="30" Height="30" Left="215" Top="163" Padding="1,1,1,1" Tag="To Dest" Margin="2,2,2,2" av:Canvas.Left="215" av:Canvas.Top="163"><BSkyVariableMoveButton.Effect><av:DropShadowEffect ShadowDepth="0" Color="#C89B5F00" Direction="320" Opacity="1" /></BSkyVariableMoveButton.Effect><av:Grid><av:Image Source="pack://application:,,,/BSky.Controls;component/Resources/left.png" /></av:Grid></BSkyVariableMoveButton><BSkyVariableMoveButton Name="move10" InputList="srclist" TargetList="text4" Width="30" Height="30" Left="589" Top="163" Padding="1,1,1,1" Tag="To Dest" Margin="2,2,2,2" av:Canvas.Left="589" av:Canvas.Top="163"><BSkyVariableMoveButton.Effect><av:DropShadowEffect ShadowDepth="0" Color="#C89B5F00" Direction="320" Opacity="1" /></BSkyVariableMoveButton.Effect><av:Grid><av:Image Source="pack://application:,,,/BSky.Controls;component/Resources/left.png" /></av:Grid></BSkyVariableMoveButton><BSkyLabel Name="lab101" Text="var1==10 | substr(var4,2,4)==&quot;abc&quot;" Width="233" Height="30" Left="257" Top="125" CanExecute="False" FontFamily="Segoe UI" FontSize="12" av:Canvas.Left="257" av:Canvas.Top="125">var1==10 | substr(var4,2,4)=="abc"</BSkyLabel><BSkyLabel Name="lab102" Text="is.na(var2) &amp; var3==&quot;Female&quot;" Width="168" Height="26" Left="256" Top="140" CanExecute="False" FontFamily="Segoe UI" FontSize="12" av:Canvas.Left="256" av:Canvas.Top="140">is.na(var2) &amp; var3=="Female"</BSkyLabel><BSkyLabel Name="lakj" Text="New/Existing Variable name (no space)" Width="237" Height="25" Left="250" Top="3" CanExecute="False" FontFamily="Segoe UI" FontSize="12" av:Canvas.Left="250" av:Canvas.Top="3">New/Existing Variable name (no space)</BSkyLabel><BSkyLabel Name="labesa" Text="&quot;Male&quot;" Width="50" Height="25" Left="630" Top="102" CanExecute="False" FontFamily="Segoe UI" FontSize="12" av:Canvas.Left="630" av:Canvas.Top="102">"Male"</BSkyLabel><BSkyLabel Name="lab23" Text="10" Width="50" Height="25" Left="632" Top="119" CanExecute="False" FontFamily="Segoe UI" FontSize="12" av:Canvas.Left="632" av:Canvas.Top="119">10</BSkyLabel><BSkyLabel Name="lab67" Text="mean(var1)+10" Width="103" Height="27" Left="632" Top="135" CanExecute="False" FontFamily="Segoe UI" FontSize="12" av:Canvas.Left="632" av:Canvas.Top="135">mean(var1)+10</BSkyLabel><BSkyLabelReqdField Name="rq1" Text="*" Width="15" Height="25" Left="458" Top="0" CanExecute="False" Foreground="#FFFF0000" FontFamily="Segoe UI" FontSize="12" FontWeight="Bold" av:Canvas.Left="458" av:Canvas.Top="0">*</BSkyLabelReqdField><BSkyLabelReqdField Name="rq2" Text="*" Width="15" Height="25" Left="416" Top="138" CanExecute="False" Foreground="#FFFF0000" FontFamily="Segoe UI" FontSize="12" FontWeight="Bold" av:Canvas.Left="416" av:Canvas.Top="138">*</BSkyLabelReqdField><BSkyLabelReqdField Name="rq3" Text="*" Width="15" Height="25" Left="715" Top="132" CanExecute="False" Foreground="#FFFF0000" FontFamily="Segoe UI" FontSize="12" FontWeight="Bold" av:Canvas.Left="715" av:Canvas.Top="132">*</BSkyLabelReqdField></BSkyCanvas>